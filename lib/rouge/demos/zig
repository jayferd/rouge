const std = @import("std");

// read an unsigned integer from standard input
fn get_num(stdin: *const std.fs.File, stdout: *const @TypeOf(std.io.getStdOut().outStream())) !u32 {
    var buf: [20]u8 = undefined;
    const len = try stdin.read(&buf);

    // 20 bytes is bigger than what a u32 can hold, so
    // check against that length to ensure we don't
    // have too big an input
    if (len == buf.len) {
        try stdout.print("Input is too long!\n", .{});
        std.os.exit(1);
    }

    const trimmed_line = std.mem.trimRight(u8, buf[0..len], "\r\n");
    const number = std.fmt.parseUnsigned(u8, trimmed_line, 10) catch {
        try stdout.print("Invalid number!\n", .{});
        std.os.exit(1);
    };

    return number;
}

fn factorial(n: u32) u32 {
    return if (n <= 0) 1 else n * factorial(n - 1);
}

pub fn main() !void {
    const stdin = std.io.getStdIn();
    const stdout = std.io.getStdOut().outStream();

    const x = get_num(&stdin, &stdout) catch 0;
    try stdout.print("The factorial of {} is {}\n", .{ x, factorial(x) });
}

