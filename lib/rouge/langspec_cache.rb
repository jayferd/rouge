# -*- coding: utf-8 -*- #
# frozen_string_literal: true
# automatically generated by running `rake generate:cache`

module Rouge
  Lexer.cache :ABAP, "abap" do
    @title = "ABAP"
    @desc = "SAP - Advanced Business Application Programming"
    @filenames = ["*.abap"]
    @mimetypes = ["text/x-abap"]
    @detectable = false
  end

  Lexer.cache :Actionscript, "actionscript" do
    @title = "ActionScript"
    @desc = "ActionScript"
    @aliases = ["as", "as3"]
    @filenames = ["*.as"]
    @mimetypes = ["application/x-actionscript"]
    @detectable = false
  end

  Lexer.cache :Ada, "ada" do
    @title = "Ada"
    @desc = "The Ada 2012 programming language"
    @filenames = ["*.ada", "*.ads", "*.adb", "*.gpr"]
    @mimetypes = ["text/x-ada"]
    @detectable = false
  end

  Lexer.cache :Apache, "apache" do
    @title = "Apache"
    @desc = "configuration files for Apache web server"
    @filenames = [".htaccess", "httpd.conf"]
    @mimetypes = ["text/x-httpd-conf", "text/x-apache-conf"]
    @detectable = false
  end

  Lexer.cache :Apex, "apex" do
    @title = "Apex"
    @desc = "The Apex programming language (provided by salesforce)"
    @filenames = ["*.cls"]
    @mimetypes = ["text/x-apex"]
    @detectable = false
  end

  Lexer.cache :APIBlueprint, "apiblueprint" do
    @title = "API Blueprint"
    @desc = "Markdown based API description language."
    @aliases = ["apib"]
    @filenames = ["*.apib"]
    @mimetypes = ["text/vnd.apiblueprint"]
    @detectable = false
  end

  Lexer.cache :AppleScript, "applescript" do
    @title = "AppleScript"
    @desc = "The AppleScript scripting language by Apple Inc. (http://developer.apple.com/applescript/)"
    @filenames = ["*.applescript", "*.scpt"]
    @mimetypes = ["application/x-applescript"]
    @detectable = false
  end

  Lexer.cache :ArmAsm, "armasm" do
    @title = "ArmAsm"
    @desc = "Arm assembly syntax"
    @filenames = ["*.s"]
    @detectable = false
  end

  Lexer.cache :Augeas, "augeas" do
    @title = "Augeas"
    @desc = "The Augeas programming language (augeas.net)"
    @aliases = ["aug"]
    @filenames = ["*.aug"]
    @mimetypes = ["text/x-augeas"]
    @detectable = false
  end

  Lexer.cache :Awk, "awk" do
    @title = "Awk"
    @desc = "pattern-directed scanning and processing language"
    @filenames = ["*.awk"]
    @mimetypes = ["application/x-awk"]
      def self.detect?(text)
        return true if text.shebang?('awk')
      end
    @detectable = true
  end

  Lexer.cache :Batchfile, "batchfile" do
    @title = "Batchfile"
    @desc = "Windows Batch File"
    @aliases = ["bat", "batch", "dosbatch", "winbatch"]
    @filenames = ["*.bat", "*.cmd"]
    @mimetypes = ["application/bat", "application/x-bat", "application/x-msdos-program"]
    @detectable = false
  end

  Lexer.cache :BBCBASIC, "bbcbasic" do
    @title = "BBCBASIC"
    @desc = "BBC BASIC syntax"
    @filenames = ["*,fd1"]
    @detectable = false
  end

  Lexer.cache :BibTeX, "bibtex" do
    @title = "BibTeX"
    @desc = "BibTeX"
    @aliases = ["bib"]
    @filenames = ["*.bib"]
    @detectable = false
  end

  Lexer.cache :BIML, "biml" do
    @title = "BIML"
    @desc = "BIML, Business Intelligence Markup Language"
    @filenames = ["*.biml"]
      def self.detect?(text)
        return true if text =~ /<\s*Biml\b/
      end
    @detectable = true
  end

  Lexer.cache :BPF, "bpf" do
    @title = "BPF"
    @desc = "BPF bytecode syntax"
    @detectable = false
  end

  Lexer.cache :Brainfuck, "brainfuck" do
    @title = "Brainfuck"
    @desc = "The Brainfuck programming language"
    @filenames = ["*.b", "*.bf"]
    @mimetypes = ["text/x-brainfuck"]
    @detectable = false
  end

  Lexer.cache :Brightscript, "brightscript" do
    @title = "BrightScript"
    @desc = "BrightScript Programming Language (https://developer.roku.com/en-ca/docs/references/brightscript/language/brightscript-language-reference.md)"
    @aliases = ["bs", "brs"]
    @filenames = ["*.brs"]
    @detectable = false
  end

  Lexer.cache :Bsl, "bsl" do
    @title = "1C (BSL)"
    @desc = "The 1C:Enterprise programming language"
    @filenames = ["*.bsl", "*.os"]
    @detectable = false
  end

  Lexer.cache :C, "c" do
    @title = "C"
    @desc = "The C programming language"
    @filenames = ["*.c", "*.h", "*.idc"]
    @mimetypes = ["text/x-chdr", "text/x-csrc"]
    @detectable = false
  end

  Lexer.cache :Ceylon, "ceylon" do
    @title = "Ceylon"
    @desc = "Say more, more clearly."
    @filenames = ["*.ceylon"]
    @mimetypes = ["text/x-ceylon"]
    @detectable = false
  end

  Lexer.cache :Cfscript, "cfscript" do
    @title = "CFScript"
    @desc = "CFScript, the CFML scripting language"
    @aliases = ["cfc"]
    @filenames = ["*.cfc"]
    @detectable = false
  end

  Lexer.cache :Clean, "clean" do
    @title = "Clean"
    @desc = "The Clean programming language (clean.cs.ru.nl)"
    @filenames = ["*.dcl", "*.icl"]
    @detectable = false
  end

  Lexer.cache :Clojure, "clojure" do
    @title = "Clojure"
    @desc = "The Clojure programming language (clojure.org)"
    @aliases = ["clj", "cljs"]
    @filenames = ["*.clj", "*.cljs", "*.cljc", "build.boot", "*.edn"]
    @mimetypes = ["text/x-clojure", "application/x-clojure"]
    @detectable = false
  end

  Lexer.cache :CMake, "cmake" do
    @title = "CMake"
    @desc = "The cross-platform, open-source build system"
    @filenames = ["CMakeLists.txt", "*.cmake"]
    @mimetypes = ["text/x-cmake"]
    @detectable = false
  end

  Lexer.cache :CMHG, "cmhg" do
    @title = "CMHG"
    @desc = "RISC OS C module header generator source file"
    @filenames = ["*.cmhg"]
    @detectable = false
  end

  Lexer.cache :Coffeescript, "coffeescript" do
    @title = "CoffeeScript"
    @desc = "The Coffeescript programming language (coffeescript.org)"
    @aliases = ["coffee", "coffee-script"]
    @filenames = ["*.coffee", "Cakefile"]
    @mimetypes = ["text/coffeescript"]
      def self.detect?(text)
        return true if text.shebang? 'coffee'
      end
    @detectable = true
  end

  Lexer.cache :CommonLisp, "common_lisp" do
    @title = "Common Lisp"
    @desc = "The Common Lisp variant of Lisp (common-lisp.net)"
    @aliases = ["cl", "common-lisp", "elisp", "emacs-lisp", "lisp"]
    @filenames = ["*.cl", "*.lisp", "*.asd", "*.el"]
    @mimetypes = ["text/x-common-lisp"]
    @detectable = false
  end

  Lexer.cache :Conf, "conf" do
    @title = "Config File"
    @desc = "A generic lexer for configuration files"
    @aliases = ["config", "configuration"]
    @filenames = ["*.conf", "*.config"]
    @detectable = false
  end

  Lexer.cache :ConsoleLexer, "console" do
    @title = "Console"
    @desc = "A generic lexer for shell sessions. Accepts ?lang and ?output lexer options, a ?prompt option, ?comments to enable # comments, and ?error to handle error messages."
    @option_docs = {"lang"=>"the shell language to lex (default: shell)", "output"=>"the output language (default: plaintext?token=Generic.Output)", "prompt"=>"comma-separated list of strings that indicate the end of a prompt. (default: $,#,>,;)", "comments"=>"enable hash-comments at the start of a line - otherwise interpreted as a prompt. (default: false, implied by ?prompt not containing `#`)", "error"=>"comma-separated list of strings that indicate the start of an error message"}
    @aliases = ["terminal", "shell_session", "shell-session"]
    @filenames = ["*.cap"]
    @detectable = false
  end

  Lexer.cache :Coq, "coq" do
    @title = "Coq"
    @desc = "Coq (coq.inria.fr)"
    @mimetypes = ["text/x-coq"]
    @detectable = false
  end

  Lexer.cache :Cpp, "cpp" do
    @title = "C++"
    @desc = "The C++ programming language"
    @aliases = ["c++"]
    @filenames = ["*.cpp", "*.hpp", "*.c++", "*.h++", "*.cc", "*.hh", "*.cxx", "*.hxx", "*.pde", "*.ino", "*.tpp", "*.h"]
    @mimetypes = ["text/x-c++hdr", "text/x-c++src"]
    @detectable = false
  end

  Lexer.cache :Crystal, "crystal" do
    @title = "Crystal"
    @desc = "Crystal The Programming Language (crystal-lang.org)"
    @aliases = ["cr"]
    @filenames = ["*.cr"]
    @mimetypes = ["text/x-crystal", "application/x-crystal"]
      def self.detect?(text)
        return true if text.shebang? 'crystal'
      end
    @detectable = true
  end

  Lexer.cache :CSharp, "csharp" do
    @title = "C#"
    @desc = "a multi-paradigm language targeting .NET"
    @aliases = ["c#", "cs"]
    @filenames = ["*.cs"]
    @mimetypes = ["text/x-csharp"]
    @detectable = false
  end

  Lexer.cache :CSS, "css" do
    @title = "CSS"
    @desc = "Cascading Style Sheets, used to style web pages"
    @filenames = ["*.css"]
    @mimetypes = ["text/css"]
    @detectable = false
  end

  Lexer.cache :CSVS, "csvs" do
    @title = "csvs"
    @desc = "The CSV Schema Language (digital-preservation.github.io)"
    @filenames = ["*.csvs"]
    @detectable = false
  end

  Lexer.cache :CUDA, "cuda" do
    @title = "CUDA"
    @desc = "Compute Unified Device Architecture, used for programming with NVIDIA GPU"
    @filenames = ["*.cu", "*.cuh"]
    @detectable = false
  end

  Lexer.cache :Cypher, "cypher" do
    @title = "Cypher"
    @desc = "The Cypher query language (neo4j.com/docs/cypher-manual)"
    @filenames = ["*.cypher"]
    @mimetypes = ["application/x-cypher-query"]
    @detectable = false
  end

  Lexer.cache :Cython, "cython" do
    @title = "Cython"
    @desc = "Cython and Pyrex source code (cython.org)"
    @aliases = ["pyx", "pyrex"]
    @filenames = ["*.pyx", "*.pxd", "*.pxi"]
    @mimetypes = ["text/x-cython", "application/x-cython"]
    @detectable = false
  end

  Lexer.cache :D, "d" do
    @title = "D"
    @desc = "The D programming language(dlang.org)"
    @aliases = ["dlang"]
    @filenames = ["*.d", "*.di"]
    @mimetypes = ["application/x-dsrc", "text/x-dsrc"]
    @detectable = false
  end

  Lexer.cache :Dart, "dart" do
    @title = "Dart"
    @desc = "The Dart programming language (dartlang.com)"
    @filenames = ["*.dart"]
    @mimetypes = ["text/x-dart"]
    @detectable = false
  end

  Lexer.cache :Datastudio, "datastudio" do
    @title = "Datastudio"
    @desc = "Datastudio scripting language"
    @filenames = ["*.job"]
    @mimetypes = ["text/x-datastudio"]
    @detectable = false
  end

  Lexer.cache :Diff, "diff" do
    @title = "diff"
    @desc = "Lexes unified diffs or patches"
    @aliases = ["patch", "udiff"]
    @filenames = ["*.diff", "*.patch"]
    @mimetypes = ["text/x-diff", "text/x-patch"]
      def self.detect?(text)
        return true if text.start_with?('Index: ')
        return true if text =~ %r(\Adiff[^\n]*?\ba/[^\n]*\bb/)
        return true if text =~ /---.*?\n[+][+][+]/ || text =~ /[+][+][+].*?\n---/
      end
    @detectable = true
  end

  Lexer.cache :Digdag, "digdag" do
    @title = "digdag"
    @desc = "A simple, open source, multi-cloud workflow engine (https://www.digdag.io/)"
    @filenames = ["*.dig"]
    @mimetypes = ["application/x-digdag"]
    @detectable = false
  end

  Lexer.cache :Docker, "docker" do
    @title = "Docker"
    @desc = "Dockerfile syntax"
    @aliases = ["dockerfile"]
    @filenames = ["Dockerfile", "*.Dockerfile", "*.docker"]
    @mimetypes = ["text/x-dockerfile-config"]
    @detectable = false
  end

  Lexer.cache :Dot, "dot" do
    @title = "DOT"
    @desc = "graph description language"
    @filenames = ["*.dot"]
    @mimetypes = ["text/vnd.graphviz"]
    @detectable = false
  end

  Lexer.cache :ECL, "ecl" do
    @title = "ECL"
    @desc = "Enterprise Control Language (hpccsystems.com)"
    @filenames = ["*.ecl"]
    @mimetypes = ["application/x-ecl"]
    @detectable = false
  end

  Lexer.cache :EEX, "eex" do
    @title = "EEX"
    @desc = "Embedded Elixir"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @aliases = ["leex"]
    @filenames = ["*.eex", "*.leex"]
    @detectable = false
  end

  Lexer.cache :Eiffel, "eiffel" do
    @title = "Eiffel"
    @desc = "Eiffel programming language"
    @filenames = ["*.e"]
    @mimetypes = ["text/x-eiffel"]
    @detectable = false
  end

  Lexer.cache :Elixir, "elixir" do
    @title = "Elixir"
    @desc = "Elixir language (elixir-lang.org)"
    @aliases = ["exs"]
    @filenames = ["*.ex", "*.exs"]
    @mimetypes = ["text/x-elixir", "application/x-elixir"]
    @detectable = false
  end

  Lexer.cache :Elm, "elm" do
    @title = "Elm"
    @desc = "The Elm programming language (http://elm-lang.org/)"
    @filenames = ["*.elm"]
    @mimetypes = ["text/x-elm"]
    @detectable = false
  end

  Lexer.cache :Email, "email" do
    @title = "Email"
    @desc = "An email message"
    @aliases = ["eml", "e-mail"]
    @filenames = ["*.eml"]
    @mimetypes = ["message/rfc822"]
    @detectable = false
  end

  Lexer.cache :EPP, "epp" do
    @title = "EPP"
    @desc = "Embedded Puppet template files"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.epp"]
    @detectable = false
  end

  Lexer.cache :ERB, "erb" do
    @title = "ERB"
    @desc = "Embedded ruby template files"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @aliases = ["eruby", "rhtml"]
    @filenames = ["*.erb", "*.erubis", "*.rhtml", "*.eruby"]
    @detectable = false
  end

  Lexer.cache :Erlang, "erlang" do
    @title = "Erlang"
    @desc = "The Erlang programming language (erlang.org)"
    @aliases = ["erl"]
    @filenames = ["*.erl", "*.hrl"]
    @mimetypes = ["text/x-erlang", "application/x-erlang"]
    @detectable = false
  end

  Lexer.cache :Escape, "escape" do
    @title = "Escape"
    @desc = "A generic lexer for including escaped content - see Formatter.enable_escape!"
    @option_docs = {"start"=>"the beginning of the escaped section, default \"<!\"", "end"=>"the end of the escaped section, e.g. \"!>\"", "lang"=>"the language to lex in unescaped sections"}
    @aliases = ["esc"]
    @detectable = false
  end

  Lexer.cache :Factor, "factor" do
    @title = "Factor"
    @desc = "Factor, the practical stack language (factorcode.org)"
    @filenames = ["*.factor"]
    @mimetypes = ["text/x-factor"]
      def self.detect?(text)
        return true if text.shebang? 'factor'
      end
    @detectable = true
  end

  Lexer.cache :Fortran, "fortran" do
    @title = "Fortran"
    @desc = "Fortran 2008 (free-form)"
    @filenames = ["*.f", "*.f90", "*.f95", "*.f03", "*.f08", "*.F", "*.F90", "*.F95", "*.F03", "*.F08"]
    @mimetypes = ["text/x-fortran"]
    @detectable = false
  end

  Lexer.cache :FreeFEM, "freefem" do
    @title = "FreeFEM"
    @desc = "The FreeFEM programming language (freefem.org)"
    @aliases = ["ff"]
    @filenames = ["*.edp", "*.idp"]
    @mimetypes = ["text/x-ffhdr", "text/x-ffsrc"]
    @detectable = false
  end

  Lexer.cache :FSharp, "fsharp" do
    @title = "FSharp"
    @desc = "F# (fsharp.net)"
    @filenames = ["*.fs", "*.fsi", "*.fsx"]
    @mimetypes = ["application/fsharp-script", "text/x-fsharp", "text/x-fsi"]
    @detectable = false
  end

  Lexer.cache :GDScript, "gdscript" do
    @title = "GDScript"
    @desc = "The Godot Engine programming language (https://godotengine.org/)"
    @aliases = ["gd"]
    @filenames = ["*.gd"]
    @mimetypes = ["text/x-gdscript", "application/x-gdscript"]
    @detectable = false
  end

  Lexer.cache :GHCCmm, "ghc_cmm" do
    @title = "GHC Cmm (C--)"
    @desc = "GHC Cmm is the intermediate representation of the GHC Haskell compiler"
    @aliases = ["cmm", "ghc-cmm"]
    @filenames = ["*.cmm", "*.dump-cmm", "*.dump-cmm-*"]
    @detectable = false
  end

  Lexer.cache :GHCCore, "ghc_core" do
    @title = "GHC Core"
    @desc = "Intermediate representation of the GHC Haskell compiler."
    @aliases = ["ghc-core"]
    @filenames = ["*.dump-simpl", "*.dump-cse", "*.dump-ds", "*.dump-spec"]
    @detectable = false
  end

  Lexer.cache :Gherkin, "gherkin" do
    @title = "Gherkin"
    @desc = "A business-readable spec DSL (github.com/cucumber/cucumber/wiki/Gherkin)"
    @aliases = ["cucumber", "behat"]
    @filenames = ["*.feature"]
    @mimetypes = ["text/x-gherkin"]
      def self.detect?(text)
        return true if text.shebang? 'cucumber'
      end
    @detectable = true
  end

  Lexer.cache :Glsl, "glsl" do
    @title = "GLSL"
    @desc = "The GLSL shader language"
    @filenames = ["*.glsl", "*.frag", "*.vert", "*.geom", "*.vs", "*.gs", "*.shader"]
    @mimetypes = ["x-shader/x-vertex", "x-shader/x-fragment", "x-shader/x-geometry"]
    @detectable = false
  end

  Lexer.cache :Go, "go" do
    @title = "Go"
    @desc = "The Go programming language (http://golang.org)"
    @aliases = ["golang"]
    @filenames = ["*.go"]
    @mimetypes = ["text/x-go", "application/x-go"]
    @detectable = false
  end

  Lexer.cache :Gradle, "gradle" do
    @title = "Gradle"
    @desc = "A powerful build system for the JVM"
    @filenames = ["*.gradle"]
    @mimetypes = ["text/x-gradle"]
    @detectable = false
  end

  Lexer.cache :GraphQL, "graphql" do
    @title = "Graphql"
    @desc = "GraphQL"
    @filenames = ["*.graphql", "*.gql"]
    @mimetypes = ["application/graphql"]
    @detectable = false
  end

  Lexer.cache :Groovy, "groovy" do
    @title = "Groovy"
    @desc = "The Groovy programming language (http://www.groovy-lang.org/)"
    @filenames = ["*.groovy", "Jenkinsfile"]
    @mimetypes = ["text/x-groovy"]
      def self.detect?(text)
        return true if text.shebang?(/groovy/)
      end
    @detectable = true
  end

  Lexer.cache :Hack, "hack" do
    @title = "Hack"
    @desc = "The Hack programming language (hacklang.org)"
    @option_docs = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start with inline php or require <?php ... ?>. (default: best guess)", "funcnamehighlighting"=>"Whether to highlight builtin functions (default: true)", "disabledmodules"=>"Disable certain modules from being highlighted as builtins (default: empty)"}
    @aliases = ["hh"]
    @filenames = ["*.php", "*.hh"]
      def self.detect?(text)
        return true if /<\?hh/ =~ text
        return true if text.shebang?('hhvm')

        return false
      end
    @detectable = true
  end

  Lexer.cache :Haml, "haml" do
    @title = "Haml"
    @desc = "The Haml templating system for Ruby (haml.info)"
    @option_docs = {"filters[filter_name]"=>"Mapping of lexers to use for haml :filters"}
    @filenames = ["*.haml"]
    @mimetypes = ["text/x-haml"]
    @detectable = false
  end

  Lexer.cache :Handlebars, "handlebars" do
    @title = "Handlebars"
    @desc = "the Handlebars and Mustache templating languages"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @aliases = ["hbs", "mustache"]
    @filenames = ["*.handlebars", "*.hbs", "*.mustache"]
    @mimetypes = ["text/x-handlebars", "text/x-mustache"]
    @detectable = false
  end

  Lexer.cache :Haskell, "haskell" do
    @title = "Haskell"
    @desc = "The Haskell programming language (haskell.org)"
    @aliases = ["hs"]
    @filenames = ["*.hs", "*.hs-boot"]
    @mimetypes = ["text/x-haskell"]
      def self.detect?(text)
        return true if text.shebang?('runhaskell')
      end
    @detectable = true
  end

  Lexer.cache :Haxe, "haxe" do
    @title = "Haxe"
    @desc = "Haxe Cross-platform Toolkit (http://haxe.org)"
    @aliases = ["hx"]
    @filenames = ["*.hx"]
    @mimetypes = ["text/haxe", "text/x-haxe", "text/x-hx"]
      def self.detect?(text)
        return true if text.shebang? "haxe"
      end
    @detectable = true
  end

  Lexer.cache :Hcl, "hcl" do
    @title = "Hashicorp Configuration Language"
    @desc = "Hashicorp Configuration Language, used by Terraform and other Hashicorp tools"
    @detectable = false
  end

  Lexer.cache :HLSL, "hlsl" do
    @title = "HLSL"
    @desc = "HLSL, the High Level Shading Language for DirectX (docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl)"
    @filenames = ["*.hlsl", "*.hlsli"]
    @mimetypes = ["text/x-hlsl"]
    @detectable = false
  end

  Lexer.cache :HOCON, "hocon" do
    @title = "HOCON"
    @desc = "Human-Optimized Config Object Notation (https://github.com/lightbend/config)"
    @filenames = ["*.hocon"]
    @detectable = false
  end

  Lexer.cache :HQL, "hql" do
    @title = "HQL"
    @desc = "Hive Query Language SQL dialect"
    @filenames = ["*.hql"]
    @detectable = false
  end

  Lexer.cache :HTML, "html" do
    @title = "HTML"
    @desc = "HTML, the markup language of the web"
    @filenames = ["*.htm", "*.html", "*.xhtml", "*.cshtml"]
    @mimetypes = ["text/html", "application/xhtml+xml"]
      def self.detect?(text)
        return true if text.doctype?(/\bhtml\b/i)
        return false if text =~ /\A<\?xml\b/
        return true if text =~ /<\s*html\b/
      end
    @detectable = true
  end

  Lexer.cache :HTTP, "http" do
    @title = "HTTP"
    @desc = "http requests and responses"
    @option_docs = {"content"=>"the language for the content (default: auto-detect)"}
    @detectable = false
  end

  Lexer.cache :HyLang, "hylang" do
    @title = "HyLang"
    @desc = "The HyLang programming language (hylang.org)"
    @aliases = ["hy"]
    @filenames = ["*.hy"]
    @mimetypes = ["text/x-hy", "application/x-hy"]
    @detectable = false
  end

  Lexer.cache :IDLang, "idlang" do
    @title = "IDL"
    @desc = "Interactive Data Language"
    @filenames = ["*.idl"]
    @detectable = false
  end

  Lexer.cache :IgorPro, "igorpro" do
    @title = "IgorPro"
    @desc = "WaveMetrics Igor Pro"
    @filenames = ["*.ipf"]
    @mimetypes = ["text/x-igorpro"]
    @detectable = false
  end

  Lexer.cache :INI, "ini" do
    @title = "INI"
    @desc = "the INI configuration format"
    @filenames = ["*.ini", "*.INI", "*.gitconfig"]
    @mimetypes = ["text/x-ini"]
    @detectable = false
  end

  Lexer.cache :IO, "io" do
    @title = "Io"
    @desc = "The IO programming language (http://iolanguage.com)"
    @filenames = ["*.io"]
    @mimetypes = ["text/x-iosrc"]
      def self.detect?(text)
        return true if text.shebang? 'io'
      end
    @detectable = true
  end

  Lexer.cache :IRBLexer, "irb" do
    @title = "Irb"
    @desc = "Shell sessions in IRB or Pry"
    @aliases = ["pry"]
    @detectable = false
  end

  Lexer.cache :IRBOutputLexer, "irb_output" do
    @title = "Irb_output"
    @desc = nil
    @detectable = false
  end

  Lexer.cache :ISBL, "isbl" do
    @title = "ISBL"
    @desc = "The ISBL programming language"
    @filenames = ["*.isbl"]
    @detectable = false
  end

  Lexer.cache :J, "j" do
    @title = "J"
    @desc = "The J programming language (jsoftware.com)"
    @filenames = ["*.ijs", "*.ijt"]
    @detectable = false
  end

  Lexer.cache :Janet, "janet" do
    @title = "Janet"
    @desc = "The Janet programming language (janet-lang.org)"
    @aliases = ["jdn"]
    @filenames = ["*.janet", "*.jdn"]
    @mimetypes = ["text/x-janet", "application/x-janet"]
    @detectable = false
  end

  Lexer.cache :Java, "java" do
    @title = "Java"
    @desc = "The Java programming language (java.com)"
    @filenames = ["*.java"]
    @mimetypes = ["text/x-java"]
    @detectable = false
  end

  Lexer.cache :Javascript, "javascript" do
    @title = "JavaScript"
    @desc = "JavaScript, the browser scripting language"
    @aliases = ["js"]
    @filenames = ["*.cjs", "*.js", "*.mjs"]
    @mimetypes = ["application/javascript", "application/x-javascript", "text/javascript", "text/x-javascript"]
      def self.detect?(text)
        return 1 if text.shebang?('node')
        return 1 if text.shebang?('jsc')
        # TODO: rhino, spidermonkey, etc
      end
    @detectable = true
  end

  Lexer.cache :Jinja, "jinja" do
    @title = "Jinja"
    @desc = "Django/Jinja template engine (jinja.pocoo.org)"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @aliases = ["django"]
    @mimetypes = ["application/x-django-templating", "application/x-jinja", "text/html+django", "text/html+jinja"]
    @detectable = false
  end

  Lexer.cache :JSL, "jsl" do
    @title = "JSL"
    @desc = "The JMP Scripting Language (JSL) (jmp.com)"
    @filenames = ["*.jsl"]
    @detectable = false
  end

  Lexer.cache :JSON, "json" do
    @title = "JSON"
    @desc = "JavaScript Object Notation (json.org)"
    @filenames = ["*.json", "Pipfile.lock"]
    @mimetypes = ["application/json", "application/vnd.api+json", "application/hal+json", "application/problem+json", "application/schema+json"]
    @detectable = false
  end

  Lexer.cache :JSONDOC, "json_doc" do
    @title = "Json_doc"
    @desc = "JavaScript Object Notation with extensions for documentation"
    @aliases = ["jsonc", "json-doc"]
    @detectable = false
  end

  Lexer.cache :Jsonnet, "jsonnet" do
    @title = "Jsonnet"
    @desc = "An elegant, formally-specified config language for JSON"
    @filenames = ["*.jsonnet", "*.libsonnet"]
    @mimetypes = ["text/x-jsonnet"]
    @detectable = false
  end

  Lexer.cache :JSP, "jsp" do
    @title = "Jsp"
    @desc = "JSP"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.jsp"]
    @mimetypes = ["text/x-jsp", "application/x-jsp"]
    @detectable = false
  end

  Lexer.cache :JSX, "jsx" do
    @title = "JSX"
    @desc = "An XML-like syntax extension to JavaScript (facebook.github.io/jsx/)"
    @aliases = ["react"]
    @filenames = ["*.jsx"]
    @mimetypes = ["text/x-jsx", "application/x-jsx"]
    @detectable = false
  end

  Lexer.cache :Julia, "julia" do
    @title = "Julia"
    @desc = "The Julia programming language"
    @aliases = ["jl"]
    @filenames = ["*.jl"]
    @mimetypes = ["text/x-julia", "application/x-julia"]
      def self.detect?(text)
        return true if text.shebang? 'julia'
      end
    @detectable = true
  end

  Lexer.cache :Kotlin, "kotlin" do
    @title = "Kotlin"
    @desc = "Kotlin Programming Language (http://kotlinlang.org)"
    @filenames = ["*.kt", "*.kts"]
    @mimetypes = ["text/x-kotlin"]
    @detectable = false
  end

  Lexer.cache :Lasso, "lasso" do
    @title = "Lasso"
    @desc = "The Lasso programming language (lassosoft.com)"
    @option_docs = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start inline instead of requiring <?lasso or ["}
    @aliases = ["lassoscript"]
    @filenames = ["*.lasso", "*.lasso[89]"]
    @mimetypes = ["text/x-lasso", "text/html+lasso", "application/x-httpd-lasso"]
      def self.detect?(text)
        return true if text.shebang?('lasso9')
        return true if text =~ /\A.*?<\?(lasso(script)?|=)/
      end
    @detectable = true
  end

  Lexer.cache :Liquid, "liquid" do
    @title = "Liquid"
    @desc = "Liquid is a templating engine for Ruby (liquidmarkup.org)"
    @filenames = ["*.liquid"]
    @detectable = false
  end

  Lexer.cache :LiterateCoffeescript, "literate_coffeescript" do
    @title = "Literate CoffeeScript"
    @desc = "Literate coffeescript"
    @aliases = ["litcoffee"]
    @filenames = ["*.litcoffee"]
    @detectable = false
  end

  Lexer.cache :LiterateHaskell, "literate_haskell" do
    @title = "Literate Haskell"
    @desc = "Literate haskell"
    @aliases = ["lithaskell", "lhaskell", "lhs"]
    @filenames = ["*.lhs"]
    @mimetypes = ["text/x-literate-haskell"]
    @detectable = false
  end

  Lexer.cache :Livescript, "livescript" do
    @title = "LiveScript"
    @desc = "LiveScript, a language which compiles to JavaScript (livescript.net)"
    @aliases = ["ls"]
    @filenames = ["*.ls"]
    @mimetypes = ["text/livescript"]
      def self.detect?(text)
        return text.shebang? 'lsc'
      end
    @detectable = true
  end

  Lexer.cache :LLVM, "llvm" do
    @title = "LLVM"
    @desc = "The LLVM Compiler Infrastructure (http://llvm.org/)"
    @filenames = ["*.ll"]
    @mimetypes = ["text/x-llvm"]
    @detectable = false
  end

  Lexer.cache :Lua, "lua" do
    @title = "Lua"
    @desc = "Lua (http://www.lua.org)"
    @option_docs = {"function_highlighting"=>"Whether to highlight builtin functions (default: true)", "disabled_modules"=>"builtin modules to disable"}
    @filenames = ["*.lua", "*.wlua"]
    @mimetypes = ["text/x-lua", "application/x-lua"]
      def self.detect?(text)
        return true if text.shebang? 'lua'
      end
    @detectable = true
  end

  Lexer.cache :Lustre, "lustre" do
    @title = "Lustre"
    @desc = "The Lustre programming language (Verimag)"
    @filenames = ["*.lus"]
    @mimetypes = ["text/x-lustre"]
    @detectable = false
  end

  Lexer.cache :Lutin, "lutin" do
    @title = "Lutin"
    @desc = "The Lutin programming language (Verimag)"
    @filenames = ["*.lut"]
    @mimetypes = ["text/x-lutin"]
    @detectable = false
  end

  Lexer.cache :M68k, "m68k" do
    @title = "M68k"
    @desc = "Motorola 68k Assembler"
    @detectable = false
  end

  Lexer.cache :Magik, "magik" do
    @title = "Magik"
    @desc = "Smallworld Magik"
    @filenames = ["*.magik"]
    @mimetypes = ["text/x-magik", "application/x-magik"]
    @detectable = false
  end

  Lexer.cache :Make, "make" do
    @title = "Make"
    @desc = "Makefile syntax"
    @aliases = ["makefile", "mf", "gnumake", "bsdmake"]
    @filenames = ["*.make", "*.mak", "*.mk", "Makefile", "makefile", "Makefile.*", "GNUmakefile", "*,fe1"]
    @mimetypes = ["text/x-makefile"]
    @detectable = false
  end

  Lexer.cache :Markdown, "markdown" do
    @title = "Markdown"
    @desc = "Markdown, a light-weight markup language for authors"
    @aliases = ["md", "mkd"]
    @filenames = ["*.markdown", "*.md", "*.mkd"]
    @mimetypes = ["text/x-markdown"]
    @detectable = false
  end

  Lexer.cache :Mason, "mason" do
    @title = "Mason"
    @desc = "The HTML::Mason framework (https://metacpan.org/pod/HTML::Mason)"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.mi", "*.mc", "*.mas", "*.m", "*.mhtml", "*.mcomp", "autohandler", "dhandler"]
    @mimetypes = ["text/x-mason", "application/x-mason"]
    @detectable = false
  end

  Lexer.cache :Mathematica, "mathematica" do
    @title = "Mathematica"
    @desc = "Wolfram Mathematica, the world's definitive system for modern technical computing."
    @aliases = ["wl"]
    @filenames = ["*.m", "*.wl"]
    @mimetypes = ["application/vnd.wolfram.mathematica.package", "application/vnd.wolfram.wl"]
    @detectable = false
  end

  Lexer.cache :Matlab, "matlab" do
    @title = "MATLAB"
    @desc = "Matlab"
    @aliases = ["m"]
    @filenames = ["*.m"]
    @mimetypes = ["text/x-matlab", "application/x-matlab"]
    @detectable = false
  end

  Lexer.cache :MiniZinc, "minizinc" do
    @title = "MiniZinc"
    @desc = "MiniZinc is a free and open-source constraint modeling language (minizinc.org)"
    @filenames = ["*.mzn", "*.fzn", "*.dzn"]
    @mimetypes = ["text/minizinc"]
    @detectable = false
  end

  Lexer.cache :Moonscript, "moonscript" do
    @title = "MoonScript"
    @desc = "Moonscript (http://www.moonscript.org)"
    @option_docs = {"function_highlighting"=>"Whether to highlight builtin functions (default: true)", "disabled_modules"=>"builtin modules to disable"}
    @aliases = ["moon"]
    @filenames = ["*.moon"]
    @mimetypes = ["text/x-moonscript", "application/x-moonscript"]
      def self.detect?(text)
        return true if text.shebang? 'moon'
      end
    @detectable = true
  end

  Lexer.cache :Mosel, "mosel" do
    @title = "Mosel"
    @desc = "An optimization language used by Fico's Xpress."
    @filenames = ["*.mos", "*.mos"]
    @mimetypes = ["text/x-mosel"]
      def self.detect?(text)
        return true if text =~ /^\s*(model|package)\s+/
      end
    @detectable = true
  end

  Lexer.cache :MsgTrans, "msgtrans" do
    @title = "MessageTrans"
    @desc = "RISC OS message translator messages file"
    @filenames = ["Messages", "Message[0-9]", "Message[1-9][0-9]", "Message[1-9][0-9][0-9]"]
    @detectable = false
  end

  Lexer.cache :MXML, "mxml" do
    @title = "MXML"
    @desc = "MXML"
    @filenames = ["*.mxml"]
    @mimetypes = ["application/xv+xml"]
    @detectable = false
  end

  Lexer.cache :Nasm, "nasm" do
    @title = "Nasm"
    @desc = "Netwide Assembler"
    @filenames = ["*.asm"]
    @mimetypes = ["text/x-nasm"]
    @detectable = false
  end

  Lexer.cache :NesAsm, "nesasm" do
    @title = "NesAsm"
    @desc = "Nesasm3 assembly (6502 asm)"
    @aliases = ["nes"]
    @filenames = ["*.nesasm"]
    @detectable = false
  end

  Lexer.cache :Nginx, "nginx" do
    @title = "nginx"
    @desc = "configuration files for the nginx web server (nginx.org)"
    @filenames = ["nginx.conf"]
    @mimetypes = ["text/x-nginx-conf"]
    @detectable = false
  end

  Lexer.cache :Nim, "nim" do
    @title = "Nim"
    @desc = "The Nim programming language (http://nim-lang.org/)"
    @aliases = ["nimrod"]
    @filenames = ["*.nim"]
    @detectable = false
  end

  Lexer.cache :Nix, "nix" do
    @title = "Nix"
    @desc = "The Nix expression language (https://nixos.org/nix/manual/#ch-expression-language)"
    @aliases = ["nixos"]
    @filenames = ["*.nix"]
    @detectable = false
  end

  Lexer.cache :ObjectiveC, "objective_c" do
    @title = "Objective-C"
    @desc = "an extension of C commonly used to write Apple software"
    @aliases = ["objc", "obj-c", "obj_c", "objectivec"]
    @filenames = ["*.m", "*.h"]
    @mimetypes = ["text/x-objective_c", "application/x-objective_c"]
    @detectable = false
  end

  Lexer.cache :ObjectiveCpp, "objective_cpp" do
    @title = "Objective-C++"
    @desc = "an extension of C++ uncommonly used to write Apple software"
    @aliases = ["objcpp", "obj-cpp", "obj_cpp", "objectivecpp", "objc++", "obj-c++", "obj_c++", "objectivec++"]
    @filenames = ["*.mm", "*.h"]
    @mimetypes = ["text/x-objective-c++", "application/x-objective-c++"]
    @detectable = false
  end

  Lexer.cache :OCaml, "ocaml" do
    @title = "OCaml"
    @desc = "Objective Caml (ocaml.org)"
    @filenames = ["*.ml", "*.mli", "*.mll", "*.mly"]
    @mimetypes = ["text/x-ocaml"]
    @detectable = false
  end

  Lexer.cache :OpenEdge, "openedge" do
    @title = "OpenEdge ABL"
    @desc = "The OpenEdge ABL programming language"
    @filenames = ["*.w", "*.i"]
    @mimetypes = ["text/x-openedge"]
    @detectable = false
  end

  Lexer.cache :OpenTypeFeatureFile, "opentype_feature_file" do
    @title = "OpenType Feature File"
    @desc = "Feature specifications for an OpenType font (adobe-type-tools.github.io/afdko)"
    @aliases = ["fea", "opentype", "opentypefeature"]
    @filenames = ["*.fea"]
    @detectable = false
  end

  Lexer.cache :Pascal, "pascal" do
    @title = "Pascal"
    @desc = "a procedural programming language commonly used as a teaching language."
    @filenames = ["*.pas", "*.lpr"]
    @mimetypes = ["text/x-pascal"]
    @detectable = false
  end

  Lexer.cache :Perl, "perl" do
    @title = "Perl"
    @desc = "The Perl scripting language (perl.org)"
    @aliases = ["pl"]
    @filenames = ["*.pl", "*.pm", "*.t"]
    @mimetypes = ["text/x-perl", "application/x-perl"]
      def self.detect?(text)
        return true if text.shebang? 'perl'
      end
    @detectable = true
  end

  Lexer.cache :PHP, "php" do
    @title = "PHP"
    @desc = "The PHP scripting language (php.net)"
    @option_docs = {"parent"=>"the parent language (default: html)", "start_inline"=>"Whether to start with inline php or require <?php ... ?>. (default: best guess)", "funcnamehighlighting"=>"Whether to highlight builtin functions (default: true)", "disabledmodules"=>"Disable certain modules from being highlighted as builtins (default: empty)"}
    @aliases = ["php3", "php4", "php5"]
    @filenames = ["*.php", "*.php[345t]", "*.phtml", "*.module", "*.inc", "*.profile", "*.install", "*.test"]
    @mimetypes = ["text/x-php"]
      def self.detect?(text)
        return true if text.shebang?('php')
        return false if /^<\?hh/ =~ text
        return true if /^<\?php/ =~ text
      end
    @detectable = true
  end

  Lexer.cache :PlainText, "plaintext" do
    @title = "Plain Text"
    @desc = "A boring lexer that doesn't highlight anything"
    @aliases = ["text", "plain_text"]
    @filenames = ["*.txt", "Messages"]
    @mimetypes = ["text/plain"]
    @detectable = false
  end

  Lexer.cache :Plist, "plist" do
    @title = "Plist"
    @desc = "plist"
    @filenames = ["*.plist", "*.pbxproj"]
    @mimetypes = ["text/x-plist", "application/x-plist"]
    @detectable = false
  end

  Lexer.cache :Pony, "pony" do
    @title = "Pony"
    @desc = nil
    @filenames = ["*.pony"]
    @detectable = false
  end

  Lexer.cache :PostScript, "postscript" do
    @title = "PostScript"
    @desc = "The PostScript language (adobe.com/devnet/postscript.html)"
    @aliases = ["postscr", "ps", "eps"]
    @filenames = ["*.ps", "*.eps"]
    @mimetypes = ["application/postscript"]
      def self.detect?(text)
        return true if /^%!/ =~ text
      end
    @detectable = true
  end

  Lexer.cache :Powershell, "powershell" do
    @title = "powershell"
    @desc = "powershell"
    @aliases = ["posh", "microsoftshell", "msshell"]
    @filenames = ["*.ps1", "*.psm1", "*.psd1", "*.psrc", "*.pssc"]
    @mimetypes = ["text/x-powershell"]
    @detectable = false
  end

  Lexer.cache :Praat, "praat" do
    @title = "Praat"
    @desc = "The Praat scripting language (praat.org)"
    @filenames = ["*.praat", "*.proc", "*.psc"]
      def self.detect?(text)
        return true if text.shebang? 'praat'
      end
    @detectable = true
  end

  Lexer.cache :Prolog, "prolog" do
    @title = "Prolog"
    @desc = "The Prolog programming language (http://en.wikipedia.org/wiki/Prolog)"
    @filenames = ["*.pro", "*.P", "*.prolog", "*.pl"]
    @mimetypes = ["text/x-prolog"]
    @detectable = false
  end

  Lexer.cache :Prometheus, "prometheus" do
    @title = "Prometheus"
    @desc = "prometheus"
    @filenames = ["*.prometheus"]
    @mimetypes = ["text/x-prometheus", "application/x-prometheus"]
    @detectable = false
  end

  Lexer.cache :Properties, "properties" do
    @title = ".properties"
    @desc = ".properties config files for Java"
    @filenames = ["*.properties"]
    @mimetypes = ["text/x-java-properties"]
    @detectable = false
  end

  Lexer.cache :Protobuf, "protobuf" do
    @title = "Protobuf"
    @desc = "Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data"
    @aliases = ["proto"]
    @filenames = ["*.proto"]
    @mimetypes = ["text/x-proto"]
    @detectable = false
  end

  Lexer.cache :Puppet, "puppet" do
    @title = "Puppet"
    @desc = "The Puppet configuration management language (puppetlabs.org)"
    @aliases = ["pp"]
    @filenames = ["*.pp"]
      def self.detect?(text)
        return true if text.shebang? 'puppet-apply'
        return true if text.shebang? 'puppet'
      end
    @detectable = true
  end

  Lexer.cache :Python, "python" do
    @title = "Python"
    @desc = "The Python programming language (python.org)"
    @aliases = ["py"]
    @filenames = ["*.py", "*.pyw", "*.sc", "SConstruct", "SConscript", "*.tac", "*.bzl", "BUCK", "BUILD", "BUILD.bazel", "WORKSPACE"]
    @mimetypes = ["text/x-python", "application/x-python"]
      def self.detect?(text)
        return true if text.shebang?(/pythonw?(?:[23](?:\.\d+)?)?/)
      end
    @detectable = true
  end

  Lexer.cache :Q, "q" do
    @title = "Q"
    @desc = "The Q programming language (kx.com)"
    @aliases = ["kdb+"]
    @filenames = ["*.q"]
    @mimetypes = ["text/x-q", "application/x-q"]
    @detectable = false
  end

  Lexer.cache :Qml, "qml" do
    @title = "QML"
    @desc = "QML, a UI markup language"
    @filenames = ["*.qml"]
    @mimetypes = ["application/x-qml", "text/x-qml"]
    @detectable = false
  end

  Lexer.cache :R, "r" do
    @title = "R"
    @desc = "The R statistics language (r-project.org)"
    @aliases = ["s"]
    @filenames = ["*.R", "*.r", ".Rhistory", ".Rprofile"]
    @mimetypes = ["text/x-r-source", "text/x-r", "text/x-R", "text/x-r", "application/x-r"]
      def self.detect?(text)
        return true if text.shebang? 'Rscript'
      end
    @detectable = true
  end

  Lexer.cache :Racket, "racket" do
    @title = "Racket"
    @desc = "Racket is a Lisp descended from Scheme (racket-lang.org)"
    @filenames = ["*.rkt", "*.rktd", "*.rktl"]
    @mimetypes = ["text/x-racket", "application/x-racket"]
      def self.detect?(text)
        text =~ /\A#lang\s*(.*?)$/
        lang_attr = $1
        return false unless lang_attr
        return true if lang_attr =~ /racket|scribble/
      end
    @detectable = true
  end

  Lexer.cache :ReasonML, "reasonml" do
    @title = "ReasonML"
    @desc = "New syntax on top of OCaml ecosystem (reasonml.github.io)"
    @filenames = ["*.re", "*.rei"]
    @mimetypes = ["text/x-reasonml"]
    @detectable = false
  end

  Lexer.cache :Rego, "rego" do
    @title = "Rego"
    @desc = "The Rego open-policy-agent (OPA) policy language (openpolicyagent.org)"
    @filenames = ["*.rego"]
    @detectable = false
  end

  Lexer.cache :RobotFramework, "robot_framework" do
    @title = "Robot Framework"
    @desc = "Robot Framework is a generic open source automation testing framework (robotframework.org)"
    @aliases = ["robot", "robot-framework"]
    @filenames = ["*.robot"]
    @mimetypes = ["text/x-robot"]
    @detectable = false
  end

  Lexer.cache :Ruby, "ruby" do
    @title = "Ruby"
    @desc = "The Ruby programming language (ruby-lang.org)"
    @aliases = ["rb"]
    @filenames = ["*.rb", "*.ruby", "*.rbw", "*.rake", "*.gemspec", "*.podspec", "Rakefile", "Guardfile", "Gemfile", "Capfile", "Podfile", "Vagrantfile", "*.ru", "*.prawn", "Berksfile", "*.arb", "Dangerfile", "Fastfile", "Deliverfile", "Appfile"]
    @mimetypes = ["text/x-ruby", "application/x-ruby"]
      def self.detect?(text)
        return true if text.shebang? 'ruby'
      end
    @detectable = true
  end

  Lexer.cache :Rust, "rust" do
    @title = "Rust"
    @desc = "The Rust programming language (rust-lang.org)"
    @aliases = ["rs", "rust,no_run", "rs,no_run", "rust,ignore", "rs,ignore", "rust,should_panic", "rs,should_panic"]
    @filenames = ["*.rs"]
    @mimetypes = ["text/x-rust"]
      def self.detect?(text)
        return true if text.shebang? 'rustc'
      end
    @detectable = true
  end

  Lexer.cache :SAS, "sas" do
    @title = "SAS"
    @desc = "SAS (Statistical Analysis Software)"
    @filenames = ["*.sas"]
    @mimetypes = ["application/x-sas", "application/x-stat-sas", "application/x-sas-syntax"]
    @detectable = false
  end

  Lexer.cache :Sass, "sass" do
    @title = "Sass"
    @desc = "The Sass stylesheet language language (sass-lang.com)"
    @filenames = ["*.sass"]
    @mimetypes = ["text/x-sass"]
    @detectable = false
  end

  Lexer.cache :Scala, "scala" do
    @title = "Scala"
    @desc = "The Scala programming language (scala-lang.org)"
    @filenames = ["*.scala", "*.sbt"]
    @mimetypes = ["text/x-scala", "application/x-scala"]
    @detectable = false
  end

  Lexer.cache :Scheme, "scheme" do
    @title = "Scheme"
    @desc = "The Scheme variant of Lisp"
    @filenames = ["*.scm", "*.ss"]
    @mimetypes = ["text/x-scheme", "application/x-scheme"]
    @detectable = false
  end

  Lexer.cache :Scss, "scss" do
    @title = "SCSS"
    @desc = "SCSS stylesheets (sass-lang.com)"
    @filenames = ["*.scss"]
    @mimetypes = ["text/x-scss"]
    @detectable = false
  end

  Lexer.cache :Sed, "sed" do
    @title = "sed"
    @desc = "sed, the ultimate stream editor"
    @filenames = ["*.sed"]
    @mimetypes = ["text/x-sed"]
      def self.detect?(text)
        return true if text.shebang? 'sed'
      end
    @detectable = true
  end

  Lexer.cache :Shell, "shell" do
    @title = "shell"
    @desc = "Various shell languages, including sh and bash"
    @aliases = ["bash", "zsh", "ksh", "sh"]
    @filenames = ["*.sh", "*.bash", "*.zsh", "*.ksh", ".bashrc", ".zshrc", ".kshrc", ".profile", "APKBUILD", "PKGBUILD", "*.ebuild", "*.eclass", "*.exheres-0", "*.exlib"]
    @mimetypes = ["application/x-sh", "application/x-shellscript", "text/x-sh", "text/x-shellscript"]
      def self.detect?(text)
        return true if text.shebang?(/(ba|z|k)?sh/)
      end
    @detectable = true
  end

  Lexer.cache :Sieve, "sieve" do
    @title = "Sieve"
    @desc = "mail filtering language"
    @filenames = ["*.sieve"]
    @detectable = false
  end

  Lexer.cache :Slice, "slice" do
    @title = "Slice"
    @desc = "Specification Language for Ice (doc.zeroc.com)"
    @filenames = ["*.ice"]
    @mimetypes = ["text/slice"]
    @detectable = false
  end

  Lexer.cache :Slim, "slim" do
    @title = "Slim"
    @desc = "The Slim template language"
    @filenames = ["*.slim"]
    @detectable = false
  end

  Lexer.cache :Smalltalk, "smalltalk" do
    @title = "Smalltalk"
    @desc = "The Smalltalk programming language"
    @aliases = ["st", "squeak"]
    @filenames = ["*.st"]
    @mimetypes = ["text/x-smalltalk"]
    @detectable = false
  end

  Lexer.cache :Smarty, "smarty" do
    @title = "Smarty"
    @desc = "Smarty Template Engine"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.tpl", "*.smarty"]
    @mimetypes = ["application/x-smarty", "text/x-smarty"]
    @detectable = false
  end

  Lexer.cache :SML, "sml" do
    @title = "SML"
    @desc = "Standard ML"
    @aliases = ["ml"]
    @filenames = ["*.sml", "*.sig", "*.fun"]
    @mimetypes = ["text/x-standardml", "application/x-standardml"]
    @detectable = false
  end

  Lexer.cache :Solidity, "solidity" do
    @title = "Solidity"
    @desc = "Solidity, an Ethereum smart contract programming language"
    @filenames = ["*.sol", "*.solidity"]
    @mimetypes = ["text/x-solidity"]
      def self.detect?(text)
        return true if text.start_with? 'pragma solidity'
      end
    @detectable = true
  end

  Lexer.cache :SPARQL, "sparql" do
    @title = "SPARQL"
    @desc = "Semantic Query Language, for RDF data"
    @filenames = ["*.rq"]
    @mimetypes = ["application/sparql-query"]
    @detectable = false
  end

  Lexer.cache :SQF, "sqf" do
    @title = "SQF"
    @desc = "Status Quo Function, a Real Virtuality engine scripting language"
    @filenames = ["*.sqf"]
    @detectable = false
  end

  Lexer.cache :SQL, "sql" do
    @title = "SQL"
    @desc = "Structured Query Language, for relational databases"
    @filenames = ["*.sql"]
    @mimetypes = ["text/x-sql"]
    @detectable = false
  end

  Lexer.cache :SSH, "ssh" do
    @title = "SSH Config File"
    @desc = "A lexer for SSH configuration files"
    @filenames = ["ssh_config"]
    @detectable = false
  end

  Lexer.cache :SuperCollider, "supercollider" do
    @title = "SuperCollider"
    @desc = "A cross-platform interpreted programming language for sound synthesis, algorithmic composition, and realtime performance"
    @filenames = ["*.sc", "*.scd"]
    @detectable = false
  end

  Lexer.cache :Swift, "swift" do
    @title = "Swift"
    @desc = "Multi paradigm, compiled programming language developed by Apple for iOS and OS X development. (developer.apple.com/swift)"
    @filenames = ["*.swift"]
    @detectable = false
  end

  Lexer.cache :SystemD, "systemd" do
    @title = "Systemd"
    @desc = "A lexer for systemd unit files"
    @aliases = ["unit-file"]
    @filenames = ["*.service"]
    @mimetypes = ["text/x-systemd-unit"]
    @detectable = false
  end

  Lexer.cache :Tap, "tap" do
    @title = "TAP"
    @desc = "Test Anything Protocol"
    @filenames = ["*.tap"]
    @mimetypes = ["text/x-tap", "application/x-tap"]
    @detectable = false
  end

  Lexer.cache :TCL, "tcl" do
    @title = "Tcl"
    @desc = "The Tool Command Language (tcl.tk)"
    @filenames = ["*.tcl"]
    @mimetypes = ["text/x-tcl", "text/x-script.tcl", "application/x-tcl"]
      def self.detect?(text)
        return true if text.shebang? 'tclsh'
        return true if text.shebang? 'wish'
        return true if text.shebang? 'jimsh'
      end
    @detectable = true
  end

  Lexer.cache :Terraform, "terraform" do
    @title = "Terraform"
    @desc = "Terraform HCL Interpolations"
    @aliases = ["tf"]
    @filenames = ["*.tf"]
    @detectable = false
  end

  Lexer.cache :TeX, "tex" do
    @title = "TeX"
    @desc = "The TeX typesetting system"
    @aliases = ["latex"]
    @filenames = ["*.tex", "*.aux", "*.toc", "*.sty", "*.cls"]
    @mimetypes = ["text/x-tex", "text/x-latex"]
      def self.detect?(text)
        return true if text =~ /\A\s*\\(documentclass|input|documentstyle|relax|ProvidesPackage|ProvidesClass)/
      end
    @detectable = true
  end

  Lexer.cache :TOML, "toml" do
    @title = "TOML"
    @desc = "the TOML configuration format (https://github.com/mojombo/toml)"
    @filenames = ["*.toml", "Pipfile"]
    @mimetypes = ["text/x-toml"]
    @detectable = false
  end

  Lexer.cache :TSX, "tsx" do
    @title = "TSX"
    @desc = "TypeScript-compatible JSX (www.typescriptlang.org/docs/handbook/jsx.html)"
    @filenames = ["*.tsx"]
    @detectable = false
  end

  Lexer.cache :TTCN3, "ttcn3" do
    @title = "TTCN3"
    @desc = "The TTCN3 programming language (ttcn-3.org)"
    @filenames = ["*.ttcn", "*.ttcn3"]
    @mimetypes = ["text/x-ttcn3", "text/x-ttcn"]
    @detectable = false
  end

  Lexer.cache :Tulip, "tulip" do
    @title = "Tulip"
    @desc = "the tulip programming language (twitter.com/tuliplang)"
    @filenames = ["*.tlp"]
    @mimetypes = ["text/x-tulip", "application/x-tulip"]
      def self.detect?(text)
        return true if text.shebang? 'tulip'
      end
    @detectable = true
  end

  Lexer.cache :Turtle, "turtle" do
    @title = "Turtle/TriG"
    @desc = "Terse RDF Triple Language, TriG"
    @filenames = ["*.ttl", "*.trig"]
    @mimetypes = ["text/turtle", "application/trig"]
    @detectable = false
  end

  Lexer.cache :Twig, "twig" do
    @title = "Twig"
    @desc = "Twig template engine (twig.sensiolabs.org)"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.twig"]
    @mimetypes = ["application/x-twig", "text/html+twig"]
    @detectable = false
  end

  Lexer.cache :Typescript, "typescript" do
    @title = "TypeScript"
    @desc = "TypeScript, a superset of JavaScript"
    @aliases = ["ts"]
    @filenames = ["*.ts", "*.d.ts"]
    @mimetypes = ["text/typescript"]
    @detectable = false
  end

  Lexer.cache :Vala, "vala" do
    @title = "Vala"
    @desc = "A programming language similar to csharp."
    @filenames = ["*.vala"]
    @mimetypes = ["text/x-vala"]
    @detectable = false
  end

  Lexer.cache :Varnish, "varnish" do
    @title = "VCL: Varnish Configuration Language"
    @desc = "The configuration language for Varnish HTTP Cache (varnish-cache.org)"
    @aliases = ["varnishconf", "vcl"]
    @filenames = ["*.vcl"]
    @mimetypes = ["text/x-varnish", "text/x-vcl"]
    @detectable = false
  end

  Lexer.cache :VisualBasic, "vb" do
    @title = "Visual Basic"
    @desc = "Visual Basic"
    @aliases = ["visualbasic"]
    @filenames = ["*.vbs", "*.vb"]
    @mimetypes = ["text/x-visualbasic", "application/x-visualbasic"]
    @detectable = false
  end

  Lexer.cache :Velocity, "velocity" do
    @title = "Velocity"
    @desc = "Velocity is a Java-based template engine (velocity.apache.org)"
    @option_docs = {"parent"=>"the parent language (default: html)"}
    @filenames = ["*.vm", "*.velocity", "*.fhtml"]
    @mimetypes = ["text/html+velocity"]
    @detectable = false
  end

  Lexer.cache :Verilog, "verilog" do
    @title = "Verilog and System Verilog"
    @desc = "The System Verilog hardware description language"
    @filenames = ["*.v", "*.sv", "*.svh"]
    @mimetypes = ["text/x-verilog", "text/x-systemverilog"]
    @detectable = false
  end

  Lexer.cache :VHDL, "vhdl" do
    @title = "VHDL 2008"
    @desc = "Very High Speed Integrated Circuit Hardware Description Language"
    @filenames = ["*.vhd", "*.vhdl", "*.vho"]
    @mimetypes = ["text/x-vhdl"]
    @detectable = false
  end

  Lexer.cache :VimL, "viml" do
    @title = "VimL"
    @desc = "VimL, the scripting language for the Vim editor (vim.org)"
    @aliases = ["vim", "vimscript", "ex"]
    @filenames = ["*.vim", "*.vba", ".vimrc", ".exrc", ".gvimrc", "_vimrc", "_exrc", "_gvimrc"]
    @mimetypes = ["text/x-vim"]
    @detectable = false
  end

  Lexer.cache :Vue, "vue" do
    @title = "Vue"
    @desc = "Vue.js single-file components"
    @aliases = ["vuejs"]
    @filenames = ["*.vue"]
    @mimetypes = ["text/x-vue", "application/x-vue"]
    @detectable = false
  end

  Lexer.cache :Wollok, "wollok" do
    @title = "Wollok"
    @desc = "Wollok lang"
    @filenames = ["*.wlk", "*.wtest", "*.wpgm"]
    @detectable = false
  end

  Lexer.cache :XML, "xml" do
    @title = "XML"
    @desc = "<desc for=\"this-lexer\">XML</desc>"
    @filenames = ["*.xml", "*.xsl", "*.rss", "*.xslt", "*.xsd", "*.wsdl", "*.svg", "*.plist"]
    @mimetypes = ["text/xml", "application/xml", "image/svg+xml", "application/rss+xml", "application/atom+xml"]
      def self.detect?(text)
        return false if text.doctype?(/html/)
        return true if text =~ /\A<\?xml\b/
        return true if text.doctype?
      end
    @detectable = true
  end

  Lexer.cache :Xojo, "xojo" do
    @title = "Xojo"
    @desc = "Xojo"
    @aliases = ["realbasic"]
    @filenames = ["*.xojo_code", "*.xojo_window", "*.xojo_toolbar", "*.xojo_menu", "*.xojo_image", "*.rbbas", "*.rbfrm", "*.rbmnu", "*.rbres", "*.rbtbar"]
    @detectable = false
  end

  Lexer.cache :XPath, "xpath" do
    @title = "XPath"
    @desc = "XML Path Language (XPath) 3.1"
    @filenames = ["*.xpath"]
    @detectable = false
  end

  Lexer.cache :XQuery, "xquery" do
    @title = "XQuery"
    @desc = "XQuery 3.1: An XML Query Language"
    @filenames = ["*.xquery", "*.xq"]
    @mimetypes = ["application/xquery"]
    @detectable = false
  end

  Lexer.cache :YAML, "yaml" do
    @title = "YAML"
    @desc = "Yaml Ain't Markup Language (yaml.org)"
    @aliases = ["yml"]
    @filenames = ["*.yaml", "*.yml"]
    @mimetypes = ["text/x-yaml"]
      def self.detect?(text)
        # look for the %YAML directive
        return true if text =~ /\A\s*%YAML/m
      end
    @detectable = true
  end

  Lexer.cache :YANG, "yang" do
    @title = "YANG"
    @desc = "Lexer for the YANG 1.1 modeling language (RFC7950)"
    @filenames = ["*.yang"]
    @mimetypes = ["application/yang"]
    @detectable = false
  end

  Lexer.cache :Zig, "zig" do
    @title = "Zig"
    @desc = "The Zig programming language (ziglang.org)"
    @aliases = ["zir"]
    @filenames = ["*.zig"]
    @mimetypes = ["text/x-zig"]
    @detectable = false
  end

end
