
           (_c3zd::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);


==================== Output Cmm ====================
2020-01-04 12:58:09.932229 UTC

[section ""data" . u3zH_srt" {
     u3zH_srt:
         const stg_SRT_2_info;
           if (_c3zd::I64 == 0) goto c3zf; else goto c3ze;
       c3zf: // global
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c3ze: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zd::I64;
           R2 = Main.string1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_info(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . Main.string_closure" {
     Main.string_closure:
         const Main.string_info;
         const 0;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.920067 UTC

[section ""data" . Main.charArray3_closure" {
     Main.charArray3_closure:
         const GHC.Types.C#_con_info;
         const 97;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.921058 UTC

[section ""data" . Main.charArray2_closure" {
     Main.charArray2_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.922009 UTC

[section ""data" . Main.charArray1_closure" {
     Main.charArray1_closure:
         const :_con_info;
         const Main.charArray2_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.923223 UTC

[section ""data" . Main.charArray_closure" {
     Main.charArray_closure:
         const :_con_info;
         const Main.charArray3_closure+1;
         const Main.charArray1_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.924127 UTC

[section ""cstring" . Main.$trModule4_bytes" {
     Main.$trModule4_bytes:
         I8[] [109,97,105,110]
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.925047 UTC

[section ""data" . Main.$trModule3_closure" {
     Main.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Main.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.926068 UTC

[section ""cstring" . Main.$trModule2_bytes" {
     Main.$trModule2_bytes:
         I8[] [77,97,105,110]
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.926966 UTC

[section ""data" . Main.$trModule1_closure" {
     Main.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Main.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.927956 UTC

[section ""data" . Main.$trModule_closure" {
     Main.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Main.$trModule3_closure+1;
         const Main.$trModule1_closure+1;
         const 3;
 }]
         const Main.string_closure;
         const GHC.Show.showLitString_closure;
         const 0;
 },
 Main.main2_entry() //  [R1]
         { info_tbls: [(c3zE,
                        label: Main.main2_info
                        rep: HeapRep static { Thunk }
                        srt: Just u3zH_srt)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c3zE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3zF; else goto c3zG;
       c3zF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3zG: // global
           (_c3zB::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3zB::I64 == 0) goto c3zD; else goto c3zC;
       c3zD: // global
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c3zC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3zB::I64;
           R3 = GHC.Show.$fShow[]1_closure;
           R2 = Main.string_closure;
           Sp = Sp - 16;
           call GHC.Show.showLitString_info(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . Main.main2_closure" {
     Main.main2_closure:
         const Main.main2_info;
         const 0;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.93387 UTC

[section ""data" . Main.main1_closure" {
     Main.main1_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)3_closure;
         const Main.main2_closure;
         const 0;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.937028 UTC

[Main.main_entry() //  []
         { info_tbls: [(c3zU,
                        label: Main.main_info
                        rep: HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
                        srt: Nothing)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c3zU: // global
           R4 = GHC.Types.True_closure+2;
           R3 = Main.main1_closure+2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutStr'_info(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Main.main_closure" {
     Main.main_closure:
         const Main.main_info;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const Main.main1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.940434 UTC

[Main.main3_entry() //  []
         { info_tbls: [(c3A4,
                        label: Main.main3_info
                        rep: HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
                        srt: Nothing)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c3A4: // global
           R2 = Main.main_closure+1;
           call GHC.TopHandler.runMainIO1_info(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . Main.main3_closure" {
     Main.main3_closure:
         const Main.main3_info;
         const Main.main_closure;
         const GHC.TopHandler.runMainIO1_closure;
         const 0;
 }]


==================== Output Cmm ====================
2020-01-04 12:58:09.943474 UTC

[:Main.main_entry() //  []
         { info_tbls: [(c3Ae,
                        label: :Main.main_info
                        rep: HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
                        srt: Just Main.main3_closure)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c3Ae: // global
           call Main.main3_info() args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . :Main.main_closure" {
     :Main.main_closure:
         const :Main.main_info;
         const 0;
 }]

