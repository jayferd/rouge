# samples from https://github.com/albertodemichelis/squirrel/tree/master/samples

local a = 123 //decimal
local b = 0x0012 //hexadecimal
local c = 075 //octal
local d = 'w' //char code

local a=1.0
local b=0.234

local multiline = @"
this is a multiline string
it will ""embed"" all the new line
characters
"

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
class BaseVector {
    constructor(...)
    {
        if(vargv.len() >= 3) {
            x = vargv[0];
            y = vargv[1];
            z = vargv[2];
        }
    }


    x = 0;
    y = 0;
    z = 0;
}

class Vector3 extends BaseVector {
    function _add(other)
    {
        if(other instanceof this.getclass())
            return ::Vector3(x+other.x,y+other.y,z+other.z);
        else
            throw "wrong parameter";
    }
    function Print()
    {
        ::print(x+","+y+","+z+"\n");
    }
}

local v0 = Vector3(1,2,3)
local v1 = Vector3(11,12,13)
local v2 = v0 + v1;
v2.Print();

FakeNamespace <- {
    Utils = {}
}

class FakeNamespace.Utils.SuperClass {
    constructor()
    {
        ::print("FakeNamespace.Utils.SuperClass")
    }
}

local testy = FakeNamespace.Utils.SuperClass();

/*
*
* Original Javascript version by David Hedbor(http://www.bagley.org/~doug/shootout/)
*
*/

function Ack(M, N) {
    if (M == 0) return( N + 1 );
    if (N == 0) return( Ack(M - 1, 1) );
    return( Ack(M - 1, Ack(M, (N - 1))) );
}

local n;

if(vargv.len()!=0) {
   n = vargv[0].tointeger();
  if(n < 1) n = 1;
} else {
  n = 1;
}
print("n="+n+"\n");
print("Ack(3,"+ n+ "):"+ Ack(3, n));

###

/*
*
* Original Javascript version by David Hedbor(http://www.bagley.org/~doug/shootout/)
*
*/

function Ack(M, N) {
    if (M == 0) return( N + 1 );
    if (N == 0) return( Ack(M - 1, 1) );
    return( Ack(M - 1, Ack(M, (N - 1))) );
}

local n;

if(vargv.len()!=0) {
   n = vargv[0].tointeger();
  if(n < 1) n = 1;
} else {
  n = 1;
}
print("n="+n+"\n");
print("Ack(3,"+ n+ "):"+ Ack(3, n));

###

/*
*Random number function from The Great Computer Language shootout
*converted to a generator func
*/

function gen_random(max) {
    local last=42
    local IM = 139968;
    local IA = 3877;
    local IC = 29573;
    for(;;){  //loops forever
        yield (max * (last = (last * IA + IC) % IM) / IM);
    }
}

local randtor=gen_random(100);

print("RAND NUMBERS \n")

for(local i=0;i<10;i+=1)
    print(">"+resume randtor+"\n");

print("FIBONACCI \n")
function fiboz(n)
{
    local prev=0;
    local curr=1;
    yield 1;

    for(local i=0;i<n-1;i+=1)
    {
        local res=prev+curr;
        prev=curr;
        yield curr=res;
    }
    return prev+curr;
}

foreach(val in fiboz(10))
{
    ::print(">"+val+"\n");
}

###

function coroutine_test(a,b)
{
    ::print(a+" "+b+"\n");
    local ret = ::suspend("suspend 1");
    ::print("the coroutine says "+ret+"\n");
    ret = ::suspend("suspend 2");
    ::print("the coroutine says "+ret+"\n");
    ret = ::suspend("suspend 3");
    ::print("the coroutine says "+ret+"\n");
    return "I'm done"
}

local coro = ::newthread(coroutine_test);

local susparam = coro.call("test","coroutine"); //starts the coroutine

local i = 1;
do
{
    ::print("suspend passed ["+susparam+"]\n")
    susparam = coro.wakeup("ciao "+i);
    ++i;
}while(coro.getstatus()=="suspended")

::print("return passed ["+susparam+"]\n")

###


local base_vec={
    function _add(n)
    {
        return {
            x=x+n.x,
            y=y+n.y,
            z=z+n.z,
        }
    }
    function _sub(n)
    {
        return {
            x=x-n.x,
            y=y-n.y,
            z=z-n.z,
        }
    }
    function _div(n)
    {
        return {
            x=x/n.x,
            y=y/n.y,
            z=z/n.z,
        }
    }
    function _mul(n)
    {
        return {
            x=x*n.x,
            y=y*n.y,
            z=z*n.z,
        }
    }
    function _modulo(n)
    {
        return {
            x=x%n,
            y=y%n,
            z=z%n,
        }
    }
    function _typeof() {return "vector";}
    function _get(key)
    {
        if(key==100)
        {
            return test_field;
        }
    },
    function _set(key,val)
    {
        ::print("key = "+key+"\n");
        ::print("val = "+val+"\n")
        if(key==100)
        {
            return test_field=val;
        }
    }
    test_field="nothing"
}

function vector(_x,_y,_z)
{
    return {x=_x,y=_y,z=_z }.setdelegate(base_vec);
}
////////////////////////////////////////////////////////////

local v1=vector(1.5,2.5,3.5);
local v2=vector(1.5,2.5,3.5);

local r=v1+v2;


foreach(i,val in r)
{
    print(i+" = "+val+"\n");
}

r=v1*v2;

foreach(i,val in r)
{
    print(i+" = "+val+"\n");
}

r=v1/v2;

foreach(i,val in r)
{
    print(i+" = "+val+"\n");
}

r=v1-v2;

foreach(i,val in r)
{
    print(i+" = "+val+"\n");
}

r=v1%2;

foreach(i,val in r)
{
    print(i+" = "+val+"\n");
}

print(v1[100]+"\n");
v1[100]="set SUCCEEDED";
print(v1[100]+"\n");

if(typeof v1=="vector")
    print("<SUCCEEDED>\n");
else
    print("<FAILED>\n");

###

/*
*Random number function from The Great Computer Language shootout
*converted to a generator func
*/

function gen_random(max) {
    local last=42
    local IM = 139968;
    local IA = 3877;
    local IC = 29573;
    for(;;){  //loops forever
        yield (max * (last = (last * IA + IC) % IM) / IM);
    }
}

local randtor=gen_random(100);

print("RAND NUMBERS \n")

for(local i=0;i<10;i+=1)
    print(">"+resume randtor+"\n");

print("FIBONACCI \n")
function fiboz(n)
{
    local prev=0;
    local curr=1;
    yield 1;

    for(local i=0;i<n-1;i+=1)
    {
        local res=prev+curr;
        prev=curr;
        yield curr=res;
    }
    return prev+curr;
}

foreach(val in fiboz(10))
{
    ::print(">"+val+"\n");
}

###


PEntity <- {
    name="noname"
    pos={x=0,y=0,z=0}
    type="entity"
    //methamethod
    _typeof=function()
    {
        return type;
    }
}

function PEntity::PrintPos()
{
    ::print("x="+pos.x+" y="+pos.y+" z="+pos.z+"\n");
}

function PEntity::new(name,pos)
{
    local newentity=clone ::PEntity;
    if(name)
        newentity.name=name;
    if(pos)
        newentity.pos=pos;
    return newentity;
}

PPlayer <- {
    model="warrior.mdl"
    weapon="fist"
    health=100
    armor=0
    //overrides the parent type
    type="player"
}

function PPlayer::new(name,pos)
{
    local p = clone ::PPlayer;
    local newplayer = ::PEntity.new(name,pos);
    newplayer.setdelegate(p);
    return newplayer;
}

local player=PPlayer.new("godzilla",{x=10,y=20,z=30});

::print("PLAYER NAME"+player.name+"\n");
::print("ENTITY TYPE"+typeof player+"\n");

player.PrintPos();

player.pos.x=123;

player.PrintPos();
