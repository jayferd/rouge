#lang racket

;; Single-line comment

#| Multi-line comment on one line |#

#| Multi-line comment on
   two lines |#

'symbol
`symbol
'(a quoted list)
`(a quasiquoted expr with ,unquasiquoted item)
#:keyword
-inf.f
+inf.f
-inf.0
+inf.0
-min.0
+max.0
-nan.0
+nan.0

(define (1-crazy-identifier-疯狂的标识符-τρελό-αναγνωριστικό x)
  (add1 x))
(check-equal? (1-crazy-identifier-疯狂的标识符-τρελό-αναγνωριστικό 1) 2)

(require xml net/url
         racket/control) ;; <<< new import

(define (serve port-no)
  (define main-cust (make-custodian))
  (parameterize ([current-custodian main-cust])
    (define listener (tcp-listen port-no 5 #t))
    (define (loop)
      (accept-and-handle listener)
      (loop))
    (thread loop))
  (λ ()
    (custodian-shutdown-all main-cust)))

(define (accept-and-handle listener)
  (define cust (make-custodian))
  (custodian-limit-memory cust (* 50 1024 1024))
  (parameterize ([current-custodian cust])
    (define-values (in out) (tcp-accept listener))
    (thread (λ ()
              (handle in out)
              (close-input-port in)
              (close-output-port out))))
  ;; Watcher thread:
  (thread (λ ()
            (sleep 10)
            (custodian-shutdown-all cust))))

(define (handle in out)
  (define req
    ;; Match the first line to extract the request:
    (regexp-match #rx"^GET (.+) HTTP/[0-9]+\\.[0-9]+"
                  (read-line in)))
  (when req
    ;; Discard the rest of the header (up to blank line):
    (regexp-match #rx"(\r\n|^)\r\n" in)
    ;; Dispatch:
    (let ([xexpr (prompt (dispatch (list-ref req 1)))]) ;; <<< changed
      ;; Send reply:
      (display "HTTP/1.0 200 Okay\r\n" out)
      (display "Server: k\r\nContent-Type: text/html\r\n\r\n" out)
      (display (xexpr->string xexpr) out))))

(define (dispatch str-path)
  ;; Parse the request as a URL:
  (define url (string->url str-path))
  ;; Extract the path part:
  (define path (map path/param-path (url-path url)))
  ;; Find a handler based on the path's first element:
  (define h (hash-ref dispatch-table (car path) #f))
  (if h
      ;; Call a handler:
      (h (url-query url))
      ;; No handler found:
      `(html (head (title "Error"))
             (body
              (font ((color "red"))
                    "Unknown page: "
                    ,str-path)))))

(define dispatch-table (make-hash))

(hash-set! dispatch-table "hello"
           (λ (query)
             `(html (body "Hello, World!"))))

;; ----------------------------------------

(define (build-request-page label next-url hidden)
  `(html
    (head (title "Enter a Number to Add"))
    (body ([bgcolor "white"])
          (form ([action ,next-url] [method "get"])
                ,label
                (input ([type "text"] [name "number"]
                        [value ""]))
                (input ([type "hidden"] [name "hidden"]
                        [value ,hidden]))
                (input ([type "submit"] [name "enter"]
                        [value "Enter"]))))))

(define (many query)
  ;; Create a page containing the form:
  (build-request-page "Number of greetings:" "/reply" ""))

(define (reply query)
  ;; Extract and use the form results:
  (define n (string->number (cdr (assq 'number query))))
  `(html (body ,@(for/list ([i (in-range n)])
                   " hello"))))

(hash-set! dispatch-table "many" many)
(hash-set! dispatch-table "reply" reply)

;; ----------------------------------------
;; Old, awkward version:

(define (sum query)
  (build-request-page "First number:" "/one" ""))

(define (one query)
  (build-request-page "Second number:"
                      "/two"
                      (cdr (assq 'number query))))

(define (two query)
  (let ([n (string->number (cdr (assq 'hidden query)))]
        [m (string->number (cdr (assq 'number query)))])
    `(html (body "The sum is " ,(number->string (+ m n))))))

(hash-set! dispatch-table "sum" sum)
(hash-set! dispatch-table "one" one)
(hash-set! dispatch-table "two" two)

;; ----------------------------------------

;; Helper to grab a computation and generate a handler for it:

(define (send/suspend mk-page)
  (let/cc k
    (define tag (format "k~a" (current-inexact-milliseconds)))
    (hash-set! dispatch-table tag k)
    (abort (mk-page (string-append "/" tag)))))

;; Helper to run the number-getting page via `send/suspend':

(define (get-number label)
  (define query
    ;; Generate a URL for the current computation:
    (send/suspend
     ;; Receive the computation-as-URL here:
     (λ (k-url)
       ;; Generate the query-page result for this connection.
       ;; Send the query result to the saved-computation URL:
       (build-request-page label k-url ""))))
  ;; We arrive here later, in a new connection
  (string->number (cdr (assq 'number query))))

;; ----------------------------------------

;; New direct-style servlet:

(define (sum2 query)
  (define m (get-number "First number:"))
  (define n (get-number "Second number:"))
  `(html (body "The sum is " ,(number->string (+ m n)))))

(hash-set! dispatch-table "sum2" sum2)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#lang web-server/insta

(require web-server/formlets
         "model-3.rkt")

; start: request -> doesn't return
; Consumes a request and produces a page that displays
; all of the web content.
(define (start request)
  (render-blog-page
   (initialize-blog!
    (build-path (current-directory)
                "the-blog-data.sqlite"))
   request))

; new-post-formlet : formlet (values string? string?)
; A formlet for requesting a title and body of a post
(define new-post-formlet
  (formlet
   (#%# ,{input-string . => . title}
        ,{input-string . => . body})
   (values title body)))

; render-blog-page: blog request -> doesn't return
; Produces an HTML page of the content of the
; blog.
(define (render-blog-page a-blog request)
  (local [(define (response-generator embed/url)
            (response/xexpr
             `(html (head (title "My Blog"))
                    (body
                     (h1 "My Blog")
                     ,(render-posts a-blog embed/url)
                     (form ([action
                             ,(embed/url insert-post-handler)])
                           ,@(formlet-display new-post-formlet)
                           (input ([type "submit"])))))))

          (define (insert-post-handler request)
            (define-values (title body)
              (formlet-process new-post-formlet request))
            (blog-insert-post! a-blog title body)
            (render-blog-page a-blog (redirect/get)))]

    (send/suspend/dispatch response-generator)))

; new-comment-formlet : formlet string
; A formlet for requesting a comment
(define new-comment-formlet
  input-string)

; render-post-detail-page: post request -> doesn't return
; Consumes a post and produces a detail page of the post.
; The user will be able to either insert new comments
; or go back to render-blog-page.
(define (render-post-detail-page a-blog a-post request)
  (local [(define (response-generator embed/url)
            (response/xexpr
             `(html (head (title "Post Details"))
                    (body
                     (h1 "Post Details")
                     (h2 ,(post-title a-post))
                     (p ,(post-body a-post))
                     ,(render-as-itemized-list
                       (post-comments a-post))
                     (form ([action
                             ,(embed/url insert-comment-handler)])
                           ,@(formlet-display new-comment-formlet)
                           (input ([type "submit"])))
                     (a ([href ,(embed/url back-handler)])
                        "Back to the blog")))))

          (define (insert-comment-handler request)
            (render-confirm-add-comment-page
             a-blog
             (formlet-process new-comment-formlet request)
             a-post
             request))

          (define (back-handler request)
            (render-blog-page a-blog request))]

    (send/suspend/dispatch response-generator)))

; render-confirm-add-comment-page :
; blog comment post request -> doesn't return
; Consumes a comment that we intend to add to a post, as well
; as the request. If the user follows through, adds a comment
; and goes back to the display page. Otherwise, goes back to
; the detail page of the post.
(define (render-confirm-add-comment-page a-blog a-comment
                                         a-post request)
  (local [(define (response-generator embed/url)
            (response/xexpr
             `(html (head (title "Add a Comment"))
                    (body
                     (h1 "Add a Comment")
                     "The comment: " (div (p ,a-comment))
                     "will be added to "
                     (div ,(post-title a-post))

                     (p (a ([href ,(embed/url yes-handler)])
                           "Yes, add the comment."))
                     (p (a ([href ,(embed/url cancel-handler)])
                           "No, I changed my mind!"))))))

          (define (yes-handler request)
            (post-insert-comment! a-blog a-post a-comment)
            (render-post-detail-page a-blog a-post (redirect/get)))

          (define (cancel-handler request)
            (render-post-detail-page a-blog a-post request))]

    (send/suspend/dispatch response-generator)))

; render-post: post (handler -> string) -> xexpr
; Consumes a post, produces an xexpr fragment of the post.
; The fragment contains a link to show a detailed view of the post.
(define (render-post a-blog a-post embed/url)
  (local [(define (view-post-handler request)
            (render-post-detail-page a-blog a-post request))]
    `(div ([class "post"])
          (a ([href ,(embed/url view-post-handler)])
             ,(post-title a-post))
          (p ,(post-body a-post))
          (div ,(number->string (length (post-comments a-post)))
               " comment(s)"))))

; render-posts: blog (handler -> string) -> xexpr
; Consumes a embed/url, produces an xexpr fragment
; of all its posts.
(define (render-posts a-blog embed/url)
  (local [(define (render-post/embed/url a-post)
            (render-post a-blog a-post embed/url))]
    `(div ([class "posts"])
          ,@(map render-post/embed/url (blog-posts a-blog)))))

; render-as-itemized-list: (listof xexpr) -> xexpr
; Consumes a list of items, and produces a rendering as
; an unorderered list.
(define (render-as-itemized-list fragments)
  `(ul ,@(map render-as-item fragments)))

; render-as-item: xexpr -> xexpr
; Consumes an xexpr, and produces a rendering
; as a list item.
(define (render-as-item a-fragment)
  `(li ,a-fragment))

; stress test, from https://github.com/tmm1/pygments.rb/blob/master/vendor/pygments-main/tests/examplefiles/example.rkt

#lang racket

(require (only-in srfi/13 string-contains))

; Single-line comment style.

;; Single-line comment style.

#| Multi-line comment style ... on one line |#

#|
Multi-line comment style ...
#|### #| nested |#||| |#
... on multiple lines
|#

#;(s-expression comment (one line))

#;
(s-expression comment
              (multiple lines))

#! shebang comment

#!/shebang comment

#! shebang \
comment

#!/shebang \
comment

;; Uncommented numbers after single-line comments
;; NEL 133
;; LS 8232
;; PS 8233

#reader racket
(define(a-function x #:keyword [y 0])
  (define foo0 'symbol) ; ()
  [define foo1 'symbol] ; []
  {define foo2 'symbol} ; {}
  (define 100-Continue 'symbol)
  (and (append (car'(1 2 3))))
  (regexp-match? #rx"foobar" "foobar")
  (regexp-match? #px"\"foo\\(bar\\)?\"" "foobar")
  (regexp-match? #rx#"foobar" "foobar")
  (regexp-match? #px#"foobar" "foobar")
  (define #csa 1)
  #Ci (let ([#%A|||b #true C
\|ｄ "foo"])
        (displayln #cS #%\ab\ #true\ C\
\\ｄ||))
  (for/list ([x (in-list (list 1 2 (list 3 4)))])
    (cond
      [(pair? x) (car x)]
      [else x])))

;; Literals
(values
 ;; #b
 #b1
 #b+1
 #b-1
 #b.1
 #b1.
 #b0.1
 #b+0.1
 #b-0.1
 #b1/10
 #b+1/10
 #b-1/10
 #b1e11
 #b+1e11
 #b-1e11
 #b.1e11
 #b1.e11
 #b0.1e11
 #b+0.1e11
 #b-0.1e11
 #b1/10e11
 #b+1/10e11
 #b-1/10e11
 #b+i
 #b1+i
 #b+1+i
 #b-1+i
 #b.1+i
 #b1.+i
 #b0.1+i
 #b+0.1+i
 #b-0.1+i
 #b1/10+i
 #b+1/10+i
 #b-1/10+i
 #b1e11+i
 #b+1e11+i
 #b-1e11+i
 #b1.e11+i
 #b.1e11+i
 #b0.1e11+i
 #b+0.1e11+i
 #b-0.1e11+i
 #b1/10e11+i
 #b+1/10e11+i
 #b-1/10e11+i
 #b+1i
 #b1+1i
 #b+1+1i
 #b-1+1i
 #b1.+1i
 #b.1+1i
 #b0.1+1i
 #b+0.1+1i
 #b-0.1+1i
 #b1/10+1i
 #b+1/10+1i
 #b-1/10+1i
 #b1e11+1i
 #b+1e11+1i
 #b-1e11+1i
 #b.1e11+1i
 #b0.1e11+1i
 #b+0.1e11+1i
 #b-0.1e11+1i
 #b1/10e11+1i
 #b+1/10e11+1i
 #b-1/10e11+1i
 #b+1/10e11i
 #b1+1/10e11i
 #b+1+1/10e11i
 #b-1+1/10e11i
 #b.1+1/10e11i
 #b0.1+1/10e11i
 #b+0.1+1/10e11i
 #b-0.1+1/10e11i
 #b1/10+1/10e11i
 #b+1/10+1/10e11i
 #b-1/10+1/10e11i
 #b1e11+1/10e11i
 #b+1e11+1/10e11i
 #b-1e11+1/10e11i
 #b.1e11+1/10e11i
 #b0.1e11+1/10e11i
 #b+0.1e11+1/10e11i
 #b-0.1e11+1/10e11i
 #b1/10e11+1/10e11i
 #b+1/10e11+1/10e11i
 #b-1/10e11+1/10e11i
 ;; #d
 #d1
 #d+1
 #d-1
 #d.1
 #d1.
 #d1.2
 #d+1.2
 #d-1.2
 #d1/2
 #d+1/2
 #d-1/2
 #d1e3
 #d+1e3
 #d-1e3
 #d.1e3
 #d1.e3
 #d1.2e3
 #d+1.2e3
 #d-1.2e3
 #d1/2e3
 #d+1/2e3
 #d-1/2e3
 #d+i
 #d1+i
 #d+1+i
 #d-1+i
 #d.1+i
 #d1.+i
 #d1.2+i
 #d+1.2+i
 #d-1.2+i
 #d1/2+i
 #d+1/2+i
 #d-1/2+i
 #d1e3+i
 #d+1e3+i
 #d-1e3+i
 #d1.e3+i
 #d.1e3+i
 #d1.2e3+i
 #d+1.2e3+i
 #d-1.2e3+i
 #d1/2e3+i
 #d+1/2e3+i
 #d-1/2e3+i
 #d+1i
 #d1+1i
 #d+1+1i
 #d-1+1i
 #d1.+1i
 #d.1+1i
 #d1.2+1i
 #d+1.2+1i
 #d-1.2+1i
 #d1/2+1i
 #d+1/2+1i
 #d-1/2+1i
 #d1e3+1i
 #d+1e3+1i
 #d-1e3+1i
 #d.1e3+1i
 #d1.2e3+1i
 #d+1.2e3+1i
 #d-1.2e3+1i
 #d1/2e3+1i
 #d+1/2e3+1i
 #d-1/2e3+1i
 #d+1/2e3i
 #d1+1/2e3i
 #d+1+1/2e3i
 #d-1+1/2e3i
 #d.1+1/2e3i
 #d1.2+1/2e3i
 #d+1.2+1/2e3i
 #d-1.2+1/2e3i
 #d1/2+1/2e3i
 #d+1/2+1/2e3i
 #d-1/2+1/2e3i
 #d1e3+1/2e3i
 #d+1e3+1/2e3i
 #d-1e3+1/2e3i
 #d.1e3+1/2e3i
 #d1.2e3+1/2e3i
 #d+1.2e3+1/2e3i
 #d-1.2e3+1/2e3i
 #d1/2e3+1/2e3i
 #d+1/2e3+1/2e3i
 #d-1/2e3+1/2e3i
 ;; Extflonums
 +nan.t
 1t3
 +1t3
 -1t3
 .1t3
 1.t3
 1.2t3
 +1.2t3
 -1.2t3
 1/2t3
 +1/2t3
 -1/2t3
 1#t0
 1.#t0
 .2#t0
 1.2#t0
 1#/2t0
 1/2#t0
 1#/2#t0
 1#t3
 1.#t3
 .2#t3
 1.2#t3
 1#/2t3
 1/2#t3
 1#/2#t3
 ;; No # reader prefix -- same as #d
 -1.23
 1.123
 1e3
 1e-22
 1/2
 -1/2
 1
 -1
 ;; #e
 #e-1.23
 #e1.123
 #e1e3
 #e1e-22
 #e1
 #e-1
 #e1/2
 #e-1/2
 ;; #d#e
 #d#e-1.23
 #d#e1.123
 #d#e1e3
 #d#e1e-22
 #d#e1
 #d#e-1
 #d#e1/2
 #d#e-1/2
 ;; #e#d
 #e#d-1.23
 #e#d1.123
 #e#d1e3
 #e#d1e-22
 #e#d1
 #e#d-1
 #e#d1/2
 #e#d-1/2
 ;; #i always float
 #i-1.23
 #i1.123
 #i1e3
 #i1e-22
 #i1/2
 #i-1/2
 #i1
 #i-1
 ;; Implicitly inexact numbers
 +nan.0
 1#
 1.#
 .2#
 1.2#
 1#/2
 1/2#
 1#/2#
 1#e3
 1.#e3
 .2#e3
 1.2#e3
 1#/2e3
 1/2#e3
 1#/2#e3
 +nan.0+i
 1#+i
 1.#+i
 .2#+i
 1.2#+i
 1#/2+i
 1/2#+i
 1#/2#+i
 1#e3+i
 1.#e3+i
 .2#e3+i
 1.2#e3+i
 1#/2e3+i
 1/2#e3+i
 1#/2#e3+i
 +nan.0i
 +1#i
 +1.#i
 +.2#i
 +1.2#i
 +1#/2i
 +1/2#i
 +1#/2#i
 +1#e3i
 +1.#e3i
 +.2#e3i
 +1.2#e3i
 +1#/2e3i
 +1/2#e3i
 +1#/2#e3i
 0+nan.0i
 0+1#i
 0+1.#i
 0+.2#i
 0+1.2#i
 0+1#/2i
 0+1/2#i
 0+1#/2#i
 0+1#e3i
 0+1.#e3i
 0+.2#e3i
 0+1.2#e3i
 0+1#/2e3i
 0+1/2#e3i
 0+1#/2#e3i
 1#/2#e3+nan.0i
 1#/2#e3+1#i
 1#/2#e3+1.#i
 1#/2#e3+.2#i
 1#/2#e3+1.2#i
 1#/2#e3+1#/2i
 1#/2#e3+1/2#i
 1#/2#e3+1#/2#i
 1#/2#e3+1#e3i
 1#/2#e3+1.#e3i
 1#/2#e3+.2#e3i
 1#/2#e3+1.2#e3i
 1#/2#e3+1#/2e3i
 1#/2#e3+1/2#e3i
 1#/2#e3+1#/2#e3i
 +nan.0@1
 1#@1
 1.#@1
 .2#@1
 1.2#@1
 1#/2@1
 1/2#@1
 1#/2#@1
 1#e3@1
 1.#e3@1
 .2#e3@1
 1.2#e3@1
 1#/2e3@1
 1/2#e3@1
 1#/2#e3@1
 1@+nan.0
 1@1#
 1@1.#
 1@.2#
 1@1.2#
 1@1#/2
 1@1/2#
 1@1#/2#
 1@1#e3
 1@1.#e3
 1@.2#e3
 1@1.2#e3
 1@1#/2e3
 1@1/2#e3
 1@1#/2#e3
 1#/2#e3@1#
 1#/2#e3@1.#
 1#/2#e3@.2#
 1#/2#e3@1.2#
 1#/2#e3@1#/2
 1#/2#e3@1/2#
 1#/2#e3@1#/2#
 1#/2#e3@1#e3
 1#/2#e3@1.#e3
 1#/2#e3@.2#e3
 1#/2#e3@1.2#e3
 1#/2#e3@1#/2e3
 1#/2#e3@1/2#e3
 1#/2#e3@1#/2#e3
 ;; #o
 #o777.777
 #o-777.777
 #o777e777
 #o777e-777
 #o3/7
 #o-3/7
 #o777
 #o-777
 #e#o777.777
 #e#o-777.777
 #e#o777e777
 #e#o777e-777
 #e#o3/7
 #e#o-3/7
 #e#o777
 #e#o-777
 #i#o777.777
 #i#o-777.777
 #i#o777e777
 #i#o777e-777
 #i#o3/7
 #i#o-3/7
 #i#o777
 #i#o-777
 ;; #x
 #x-f.f
 #xf.f
 #xfsf
 #xfs-f
 #x7/f
 #x-7/f
 #x-f
 #xf
 #e#x-f.f
 #e#xf.f
 #e#xfsf
 #e#xfs-f
 #e#x7/f
 #e#x-7/f
 #e#x-f
 #e#xf
 #i#x-f.f
 #i#xf.f
 #i#xfsf
 #i#xfs-f
 #i#x7/f
 #i#x-7/f
 #i#x-f
 #i#xf
 ;; Not numbers
 '-1.23x
 '1.123x
 '1e3x
 '1e-22x
 '1/2x
 '-1/2x
 '1x
 '-1x
 '/
 '1/
 '/2
 '1//2
 '1e3.
 '1e
 'e3
 '.i
 '1.2.3
 '1..2
 '.1.
 '@
 '1@
 '@2
 '1@@2
 '1@2@3
 '1@2i
 '1+-2i
 '1i+2
 '1i+2i
 '1+2i+3i
 '-
 '--1
 '+
 '++1
 '1/2.3
 '1#2
 '1#.2
 '1.#2
 '.#2
 '+nan.t+nan.ti
 '+nan.t@nan.t
 ;; Booleans
 #t
 #T
 #true
 #f
 #F
 #false
 ;; Characters, strings, and byte strings
 #\
 #\Null9
 #\n9
 #\99
 #\0009
 #\u3BB
 #\u03BB9
 #\U3BB
 #\U000003BB9
 #\λ9
 "string\
 \a.\b.\t.\n.\v.\f.\r.\e.\".\'.\\.\1.\123.\1234.\x9.\x30.\x303"
 "\u9.\u1234.\u12345.\U9.\U00100000.\U001000000"
 #"byte-string\7\xff\t"
 #<<HERE STRING
lorem ipsum
dolor sit amet
consectetur HERE STRING
HERE STRING adipisicing elit
HERE STRING
 #|
HERE STRING
|#
 ;; Other literals
 #(vector)
 #20()
 #s[prefab-structure 1 2 3]
 #&{box}
 #hash(("a" . 5))
 #hasheq((a . 5) (b . 7))
 #hasheqv((a . 5) (b . 7))
 #'(define x 1)
 #`(define x #,pi)
 ;; quote, quasiquote, and unquote
 'pi
 ' pi
 ''pi
 '`pi
 '`,pi
 ',pi
 `pi
 ` pi
 `'pi
 ``pi
 `,pi
 ` , pi
 `,'pi
 `,`pi
 `,`,pi
 '(+)
 ' (+)
 ''(+)
 '`(+)
 ',(+)
 `(+)
 ` (+)
 `'(+)
 ``(+)
 `,(+)
 ` , (+)
 `,'(+)
 `,`(+)
 `,`,(+)
 #readerracket/base'pi.f
 '#readerracket/base pi.f
 #readerracket/base`pi.f
 `#readerracket/base pi.f
 #readerracket/base`,pi.f
 `#readerracket/base,pi.f
 `,#readerracket/base pi.f
 #readerracket/base'`,pi.f
 '#readerracket/base`,pi.f
 '`#readerracket/base,pi.f
 '`,#readerracket/base pi.f
 #readerracket/base'(*)
 '#readerracket/base(*)
 #readerracket/base`(*)
 `#readerracket/base(*)
 #readerracket/base`,(*)
 `#readerracket/base,(*)
 `,#readerracket/base(*)
 #readerracket/base'`,(*)
 '#readerracket/base`,(*)
 '`#readerracket/base,(*)
 '`,#readerracket/base(*)
 (quote pi)
 (quote (quote pi))
 (quote (quasiquote pi))
 (quote (quasiquote (unquote pi)))
 (quote (unquote pi))
 (quasiquote pi)
 (quasiquote (quote pi))
 (quasiquote (quasiquote pi))
 (quasiquote (unquote pi))
 (quasiquote (unquote (quote pi)))
 (quasiquote (unquote (quasiquote pi)))
 (quasiquote (unquote (quasiquote (unquote pi))))
 (quote (+))
 (quote (quote (+)))
 (quote (quasiquote (+)))
 (quote (unquote (+)))
 (quasiquote (+))
 (quasiquote (quote (+)))
 (quasiquote (quasiquote (+)))
 (quasiquote (unquote (+)))
 (quasiquote (unquote (quote (+))))
 (quasiquote (unquote (quasiquote (+))))
 (quasiquote (unquote (quasiquote (unquote (+)))))
 #reader racket/base (quote pi.f)
 (quote #reader racket/base pi.f)
 #reader racket/base (quasiquote pi.f)
 (quasiquote #reader racket/base pi.f)
 #reader racket/base (quasiquote (unquote pi.f))
 (quasiquote #reader racket/base (unquote pi.f))
 (quasiquote (unquote #reader racket/base pi.f))
 #reader racket/base (quote (quasiquote (unquote pi.f)))
 (quote #reader racket/base (quasiquote (unquote pi.f)))
 (quote (quasiquote #reader racket/base (unquote pi.f)))
 (quote (quasiquote (unquote #reader racket/base pi.f)))
 #reader racket/base (quote (*))
 (quote #reader racket/base (*))
 #reader racket/base (quasiquote (*))
 (quasiquote #reader racket/base (*))
 #reader racket/base (quasiquote (unquote (*)))
 (quasiquote #reader racket/base (unquote (*)))
 (quasiquote (unquote #reader racket/base (*)))
 #reader racket/base (quote (quasiquote (unquote (*))))
 (quote #reader racket/base (quasiquote (unquote (*))))
 (quote (quasiquote #reader racket/base (unquote (*))))
 (quote (quasiquote (unquote #reader racket/base (*))))
 ;; Make sure non-identifiers work with quotes
 ' "" pi
 ' #t pi
 ' #() pi
 ' #s(s) pi
 ' #\u3BB pi
 ' #\U000003BB pi
 ' #\space pi
 ' #\. pi
 ' #"" pi
 ' #:kw pi
 ' #&b pi
 ' #'(define x 1) pi
 ' #`(define x #,pi) pi
 ' #I0 pi
 ' #E0 pi
 ' #X0 pi
 ' #O0 pi
 ' #D0 pi
 ' #B0 pi
 ' #<<EOF
EOF
 pi
 ' #rx"" pi
 ' #rx#"" pi
 ' #px"" pi
 ' #px#"" pi
 ' #hash() pi
 ' #hasheq[] pi
 ' #hasheqv{} pi
 ' #1(v) pi
 )

;; Use the following to generate lists of built-ins and keywords.
;; Run
;;   (displayln (wrap-lines KEYWORDS))
;;   (displayln (wrap-lines BUILTINS))
;; and copy the results into RacketLexer._keywords and RacketLexer._builtins.

;; (-> (listof string?) string?)
;; Appends all the strings together, quoting them as appropriate for Python,
;; with commas and spaces between them, wrapping at 80 characters, with an
;; indentation of 8 spaces.
(define (wrap-lines lst)
  (define INDENTATION '"        ")
  (define WIDTH '80)
  (define (wrap-lines* lst done-lines current-line)
    (if (null? lst)
        (string-append (foldr string-append "" done-lines) current-line)
        (let* ([str (first lst)]
               [wrapped-str (if (regexp-match-exact? '#px"[[:ascii:]]+" str)
                                (string-append "'" str "',")
                                (string-append "u'" str "',"))]
               [new-line (string-append current-line " " wrapped-str)])
          (if ((string-length new-line) . >= . WIDTH)
              (wrap-lines* (rest lst)
                           (append done-lines
                                   `(,(string-append current-line "\n")))
                           (string-append INDENTATION wrapped-str))
              (wrap-lines* (rest lst)
                           done-lines
                           new-line)))))
  (wrap-lines* lst '() INDENTATION))

;; (-> string? boolean?)
;; Returns #t if str represents a syntax identifier in the current namespace,
;; otherwise #f.
(define (syntax-identifier? str)
    (with-handlers ([exn? exn?])
      (not (eval (call-with-input-string str read)))))

(define RACKET-NAMESPACE
  (parameterize ([current-namespace (make-base-namespace)])
    (namespace-require 'racket)
    (current-namespace)))

(define BOUND-IDENTIFIERS
  (parameterize ([current-namespace RACKET-NAMESPACE])
    (sort (map symbol->string (namespace-mapped-symbols))
          string<=?)))

(define-values (KEYWORDS BUILTINS)
  (parameterize ([current-namespace RACKET-NAMESPACE])
    (partition syntax-identifier? BOUND-IDENTIFIERS)))
